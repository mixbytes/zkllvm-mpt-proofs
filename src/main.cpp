#ifdef __ZKLLVM__
#include <nil/crypto3/hash/algorithm/hash.hpp>
#include <nil/crypto3/hash/sha2.hpp>
#include <nil/crypto3/hash/poseidon.hpp>
using namespace nil::crypto3;
using namespace nil::crypto3::algebra::curves;

#endif



#include <stdlib.h>
#include <stdio.h>


#include "keccak256.h"
/* sha3 - an implementation of Secure Hash Algorithm 3 (Keccak).
 * based on the
 * The Keccak SHA-3 submission. Submission to NIST (Round 3), 2011
 * by Guido Bertoni, Joan Daemen, MichaÃ«l Peeters and Gilles Van Assche
 *
 * Copyright: 2013 Aleksey Kravchenko <rhash.admin@gmail.com>
 *
 * Permission is hereby granted,  free of charge,  to any person  obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction,  including without limitation
 * the rights to  use, copy, modify,  merge, publish, distribute, sublicense,
 * and/or sell copies  of  the Software,  and to permit  persons  to whom the
 * Software is furnished to do so.
 *
 * This program  is  distributed  in  the  hope  that it will be useful,  but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  Use this program  at  your own risk!
 */

#include "keccak256.h"

//#include <avr/pgmspace.h>

#include <string.h>
#include <stdint.h>

#define BLOCK_SIZE     ((1600 - 256 * 2) / 8)

#define I64(x) x##LL
#define ROTL64(qword, n) ((qword) << (n) ^ ((qword) >> (64 - (n))))
#define le2me_64(x) (x)
#define IS_ALIGNED_64(p) (0 == (7 & ((const char*)(p) - (const char*)0)))
#define me64_to_le_str(to, from, length) memcpy((to), (from), (length))

/* constants */

//const uint8_t round_constant_info[] PROGMEM = {
//const uint8_t constants[] PROGMEM = {
const uint8_t constants[]  = {

    1, 26, 94, 112, 31, 33, 121, 85, 14, 12, 53, 38, 63, 79, 93, 83, 82, 72, 22, 102, 121, 88, 33, 116,
//};

//const uint8_t pi_transform[] PROGMEM = {
    1, 6, 9, 22, 14, 20, 2, 12, 13, 19, 23, 15, 4, 24, 21, 8, 16, 5, 3, 18, 17, 11, 7, 10,
//};

//const uint8_t rhoTransforms[] PROGMEM = {
    1, 62, 28, 27, 36, 44, 6, 55, 20, 3, 10, 43, 25, 39, 41, 45, 15, 21, 8, 18, 2, 61, 56, 14,
};

#define TYPE_ROUND_INFO      0
#define TYPE_PI_TRANSFORM   24
#define TYPE_RHO_TRANSFORM  48

uint8_t getConstant(uint8_t type, uint8_t index) {
    return constants[type + index];
    //return pgm_read_byte(&constants[type + index]);
}

static uint64_t get_round_constant(uint8_t round) {
    uint64_t result = 0;

    //uint8_t roundInfo = pgm_read_byte(&round_constant_info[round]);
    uint8_t roundInfo = getConstant(TYPE_ROUND_INFO, round);
    if (roundInfo & (1 << 6)) { result |= ((uint64_t)1 << 63); }
    if (roundInfo & (1 << 5)) { result |= ((uint64_t)1 << 31); }
    if (roundInfo & (1 << 4)) { result |= ((uint64_t)1 << 15); }
    if (roundInfo & (1 << 3)) { result |= ((uint64_t)1 << 7); }
    if (roundInfo & (1 << 2)) { result |= ((uint64_t)1 << 3); }
    if (roundInfo & (1 << 1)) { result |= ((uint64_t)1 << 1); }
    if (roundInfo & (1 << 0)) { result |= ((uint64_t)1 << 0); }

    return result;
}


/* Initializing a sha3 context for given number of output bits */
void keccak_init(SHA3_CTX *ctx) {
    /* NB: The Keccak capacity parameter = bits * 2 */

    memset(ctx, 0, sizeof(SHA3_CTX));
}

/* Keccak theta() transformation */
static void keccak_theta(uint64_t *A) {
    uint64_t C[5], D[5];

    for (uint8_t i = 0; i < 5; i++) {
        C[i] = A[i];
        for (uint8_t j = 5; j < 25; j += 5) { C[i] ^= A[i + j]; }
    }

    for (uint8_t i = 0; i < 5; i++) {
        D[i] = ROTL64(C[(i + 1) % 5], 1) ^ C[(i + 4) % 5];
    }

    for (uint8_t i = 0; i < 5; i++) {
        //for (uint8_t j = 0; j < 25; j += 5) {
        for (uint8_t j = 0; j < 25; j += 5) { A[i + j] ^= D[i]; }
    }
}


/* Keccak pi() transformation */
static void keccak_pi(uint64_t *A) {
    uint64_t A1 = A[1];
    //for (uint8_t i = 1; i < sizeof(pi_transform); i++) {
    for (uint8_t i = 1; i < 24; i++) {
        //A[pgm_read_byte(&pi_transform[i - 1])] = A[pgm_read_byte(&pi_transform[i])];
        A[getConstant(TYPE_PI_TRANSFORM, i - 1)] = A[getConstant(TYPE_PI_TRANSFORM, i)];
    }
    A[10] = A1;
    /* note: A[ 0] is left as is */
}

/*
ketch uses 30084 bytes (93%) of program storage space. Maximum is 32256 bytes.
Global variables use 743 bytes (36%) of dynamic memory, leaving 1305 bytes for local variables. Maximum is 2048 bytes.

*/
/* Keccak chi() transformation */
static void keccak_chi(uint64_t *A) {
    for (uint8_t i = 0; i < 25; i += 5) {
        uint64_t A0 = A[0 + i], A1 = A[1 + i];
        A[0 + i] ^= ~A1 & A[2 + i];
        A[1 + i] ^= ~A[2 + i] & A[3 + i];
        A[2 + i] ^= ~A[3 + i] & A[4 + i];
        A[3 + i] ^= ~A[4 + i] & A0;
        A[4 + i] ^= ~A0 & A1;
    }
}


static void sha3_permutation(uint64_t *state) {
    //for (uint8_t round = 0; round < sizeof(round_constant_info); round++) {
    for (uint8_t round = 0; round < 24; round++) {
        keccak_theta(state);

        /* apply Keccak rho() transformation */
        for (uint8_t i = 1; i < 25; i++) {
            //state[i] = ROTL64(state[i], pgm_read_byte(&rhoTransforms[i - 1]));
            state[i] = ROTL64(state[i], getConstant(TYPE_RHO_TRANSFORM, i - 1));
        }

        keccak_pi(state);
        keccak_chi(state);

        /* apply iota(state, round) */
        *state ^= get_round_constant(round);
    }
}

/**
 * The core transformation. Process the specified block of data.
 *
 * @param hash the algorithm state
 * @param block the message block to process
 * @param block_size the size of the processed block in bytes
 */
static void sha3_process_block(uint64_t hash[25], const uint64_t *block) {
    for (uint8_t i = 0; i < 17; i++) {
        hash[i] ^= le2me_64(block[i]);
    }

    /* make a permutation of the hash */
    sha3_permutation(hash);
}

//#define SHA3_FINALIZED 0x80000000
//#define SHA3_FINALIZED 0x8000

/**
 * Calculate message hash.
 * Can be called repeatedly with chunks of the message to be hashed.
 *
 * @param ctx the algorithm context containing current hashing state
 * @param msg message chunk
 * @param size length of the message chunk
 */
void keccak_update(SHA3_CTX *ctx, const unsigned char *msg, uint16_t size)
{
    uint16_t idx = (uint16_t)ctx->rest;

    //if (ctx->rest & SHA3_FINALIZED) return; /* too late for additional input */
    ctx->rest = (unsigned)((ctx->rest + size) % BLOCK_SIZE);

    /* fill partial block */
    if (idx) {
        uint16_t left = BLOCK_SIZE - idx;
        memcpy((char*)ctx->message + idx, msg, (size < left ? size : left));
        if (size < left) return;

        /* process partial block */
        sha3_process_block(ctx->hash, ctx->message);
        msg  += left;
        size -= left;
    }

    while (size >= BLOCK_SIZE) {
        uint64_t* aligned_message_block;
        if (IS_ALIGNED_64(msg)) {
            // the most common case is processing of an already aligned message without copying it
            aligned_message_block = (uint64_t*)(void*)msg;
        } else {
            memcpy(ctx->message, msg, BLOCK_SIZE);
            aligned_message_block = ctx->message;
        }

        sha3_process_block(ctx->hash, aligned_message_block);
        msg  += BLOCK_SIZE;
        size -= BLOCK_SIZE;
    }

    if (size) {
        memcpy(ctx->message, msg, size); /* save leftovers */
    }
}

/**
* Store calculated hash into the given array.
*
* @param ctx the algorithm context containing current hashing state
* @param result calculated hash in binary form
*/
void keccak_final(SHA3_CTX *ctx, unsigned char* result)
{
    uint16_t digest_length = 100 - BLOCK_SIZE / 2;

//    if (!(ctx->rest & SHA3_FINALIZED)) {
        /* clear the rest of the data queue */
        memset((char*)ctx->message + ctx->rest, 0, BLOCK_SIZE - ctx->rest);
        ((char*)ctx->message)[ctx->rest] |= 0x01;
        ((char*)ctx->message)[BLOCK_SIZE - 1] |= 0x80;

        /* process final block */
        sha3_process_block(ctx->hash, ctx->message);
//        ctx->rest = SHA3_FINALIZED; /* mark context as finalized */
//    }

    if (result) {
         me64_to_le_str(result, ctx->hash, digest_length);
    }
}

///////////////////////////////////////// END OF KECCAK //////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////





#define STRING_SHORT_START 0x80
#define STRING_LONG_START 0xb8
#define LIST_SHORT_START 0xc0
#define LIST_LONG_START 0xf8

typedef struct {
    uint8_t* data;
    size_t length;
} Bytes;

typedef struct {
    uint32_t len;
    uint8_t* memPtr;
} RLPItem;

int compareBytes32(uint8_t a[32], uint8_t b[32]) {
    for (int i = 0 ; i < 32; i++) {
        if (a[i] != b[i]) {
            return 0;
        }
    }

    return 1;
}
void own_memset(void *s, unsigned char c,  unsigned int len)                                                                           
{                                                                                                                                      
    unsigned char* p = (unsigned char *)s;                                                                                                              
    while(len--)                                                                                                                       
    {                                                                                                                                  
        *p++ = c;                                                                                                                      
    }                                                                                                                                  
    return;                                                                                                                            
}

int own_memcmp(const void* ptr1, const void* ptr2, size_t num) {
    const unsigned char* p1 = (unsigned char *)ptr1;
    const unsigned char* p2 = (unsigned char *)ptr2;

    while (num-- > 0) {
        if (*p1 != *p2) {
            return (*p1 > *p2) - (*p1 < *p2);
        }
        p1++;
        p2++;
    }

    return 0;
} 

void* own_memcpy(void* destination, const void* source, size_t num) {
    unsigned char* dest = (unsigned char *)destination;
    const unsigned char* src = (unsigned char *)source;

    while (num-- > 0) {
        *dest++ = *src++;
    }

    return destination;
}

Bytes* _decodeNibbles(Bytes *compact, uint8_t skipNibbles) {                                                                        
    // CHECK compact size;                                                                                                             
                                                                                                                                       
    uint8_t length = compact->length * 2;                                                                                                       
    if(skipNibbles > length) {
        printf("FUCK\n");
        exit(-1);
    }                                                                                            
    length -= skipNibbles;                                                                                                             
    Bytes *nibbles = (Bytes *)malloc(sizeof(Bytes));                                                                                                                                
    nibbles->data = (uint8_t *)malloc(sizeof(uint8_t) * length); 
    nibbles->length = length;
    unsigned int nibbles_length = 0;                                                                                               
                                                                                                                                       
    for (uint8_t i = skipNibbles; i < skipNibbles + length; i += 1) {                                                    
        if (i % 2 == 0) {                                                                                                              
            nibbles->data[nibbles_length] = (uint8_t)((compact->data[i / 2] >> 4) & 0xF);                                                           
        } else {                                                                                                                       
            nibbles->data[nibbles_length] = (uint8_t)((compact->data[i / 2] >> 0) & 0xF);                                                           
        }                                                                                                                              
        nibbles_length += 1;                                                                                                            
    }                                                                                                                                  
                                                                                                                                       
    // CHECK assert(nibblesLength == nibbles.size());                                                                                  
                                                                                                                                       
    return nibbles;                                                                                                                    
}

void mptHashHash(RLPItem *item, uint8_t output[32]) {
    SHA3_CTX context;
    keccak_init(&context);
    
    Bytes *result = (Bytes*) malloc(sizeof(Bytes));
    result->data = (uint8_t*) malloc(sizeof(uint8_t));
    result->length = 32;

    if (item->len < 32) {
        keccak_update(&context, (const unsigned char*) (item->memPtr), (size_t) (item->len));
        keccak_final(&context, (unsigned char*) output);                                                                                                                                                                                    
    } else {                                                                                                                           
        keccak_update(&context, (const unsigned char*) (item->memPtr), (size_t) (item->len));
        keccak_final(&context, (unsigned char*) output);

        keccak_init(&context);
        keccak_update(&context, (const unsigned char*) (output), (size_t) 32);
        keccak_final(&context, (unsigned char*) output);                                                               
    }

    free(result->data);
    free(result);
    own_memset((char*)&context, 0, sizeof(SHA3_CTX));
}

uint32_t _payloadOffset(const uint8_t *ptr) {
    uint8_t firstByte = *ptr;

    if (firstByte < STRING_SHORT_START) {
        return 0;
    } else if (firstByte < STRING_LONG_START || (firstByte >= LIST_SHORT_START && firstByte < LIST_LONG_START)) {
        return 1;
    } else if (firstByte < LIST_SHORT_START) {
        return firstByte - (STRING_LONG_START - 1) + 1;
    } else {
        return firstByte - (LIST_LONG_START - 1) + 1;
    }
}

int isList(const RLPItem* item) {
    if (item->len == 0) return 0;

    uint8_t byte0 = item->memPtr[0];
    return byte0 >= LIST_SHORT_START;
}

uint32_t _itemLength(uint8_t *ptr) {
    uint8_t firstByte = *ptr;
    if (firstByte < STRING_SHORT_START) {
        return 1;
    } else if (firstByte < STRING_LONG_START) {
        return firstByte - STRING_SHORT_START + 1;
    } else if (firstByte < LIST_SHORT_START) {
        uint8_t lengthOfLength = firstByte - STRING_LONG_START + 1;
        uint32_t dataLength = 0;
        for (uint8_t i = 0; i < lengthOfLength; ++i) {
            dataLength = (dataLength << 8) + ptr[i + 1]; // TODO: check this
        }

        //uint32_t dataLength = *(ptr + 1) / pow(256, 32 - lengthOfLength);

        return 1 + lengthOfLength + dataLength;
    } else if (firstByte < LIST_LONG_START) {
        return firstByte - LIST_SHORT_START + 1;
    } else {
        uint8_t lengthOfLength = firstByte - LIST_LONG_START + 1;
        uint32_t dataLength = 0;
        for (uint8_t i = 0; i < lengthOfLength; ++i) {
           dataLength = (dataLength << 8) + ptr[i + 1];
        }

        //uint32_t dataLength = *(ptr + 1) / pow(256, 32 - lengthOfLength);

        return 1 + lengthOfLength + dataLength;
    }
}

RLPItem** toList(const RLPItem* item, uint32_t* numItems) {
    if (!isList(item)) {
        *numItems = 0;
        return NULL;
    }

    uint32_t count = 0;

    uintptr_t currPtr = (uintptr_t)(item->memPtr) + _payloadOffset(item->memPtr);
    uintptr_t endPtr = (uintptr_t)(item->memPtr) + item->len;
    
    while (currPtr < endPtr) {
        currPtr += _itemLength((uint8_t*) currPtr);
        count++;
    }

    RLPItem** list = (RLPItem**) malloc(count * sizeof(RLPItem*));
    if (list == NULL) {
        *numItems = 0;
        return NULL;
    }

    currPtr = _payloadOffset(item->memPtr);
    for (uint32_t i = 0; i < count; ++i) {
        uint32_t len = _itemLength(item->memPtr + currPtr);

        RLPItem *listItem = (RLPItem *) malloc(sizeof(RLPItem));
        listItem->memPtr = (uint8_t*) malloc(len * sizeof(uint8_t));

        own_memcpy(listItem->memPtr, item->memPtr + currPtr, len);
        listItem->len = len;
    
        list[i] = listItem;

        currPtr += len;
    }

    *numItems = count;
    return list;
}

uint8_t* toBytes(RLPItem* item) {
    int bytesLength = item->len;
    uint8_t* bytes = (uint8_t*)malloc(bytesLength);
    if (bytes != NULL) {
        own_memcpy(bytes, item->memPtr, bytesLength);
    }
    return bytes;
}

int _isEmptyBytesequence(RLPItem *item) {
    if (item->len != 1) {
        return 0;
    }

    uint8_t b;
    uint8_t *memPtr = item->memPtr;

    return *memPtr == 128;
}

void keccak256(const uint8_t* input, size_t inputLen, uint8_t output[32]) {
    SHA3_CTX context;
    keccak_init(&context);
    keccak_update(&context, (const unsigned char*) input, (size_t) inputLen);
    keccak_final(&context, (unsigned char*) output); 
}

void payloadLocation(const RLPItem* item, uint8_t** memPtr, uint32_t* len) {
    uint32_t offset = _payloadOffset(item->memPtr);
    *memPtr = item->memPtr + offset;
    *len = item->len - offset;
};

void payloadKeccak256(const RLPItem* item, uint8_t output[32]) {
    uint8_t* memPtr;
    uint32_t len;

    payloadLocation(item, &memPtr, &len);

    keccak256(memPtr, len, output);
}

int _merklePatriciaCompactDecode(Bytes *compact, Bytes* output) {
    int isLeaf;

    int first_nibble = ((uint8_t) compact->data[0]) >> 4 & 0xF;
    int skipNibbles;
    if (first_nibble == 0) {
        skipNibbles = 2;
        isLeaf = 0;
    } else if (first_nibble == 1) {
        skipNibbles = 1;
        isLeaf = 0;
    } else if (first_nibble == 2) {
        skipNibbles = 2;
        isLeaf = 1;
    } else if (first_nibble == 3) {
        skipNibbles = 1;
        isLeaf = 1;
    } else {
        exit(-1);
    }

    output = _decodeNibbles(compact, skipNibbles);

    return isLeaf;
}

size_t _sharedPrefixLength(size_t xsOffset, uint8_t* xs, size_t xsLen, uint8_t* ys, size_t ysLen) {
    size_t i;
    for (i = 0; i + xsOffset < xsLen && i < ysLen; i++) {
        if (xs[i + xsOffset] != ys[i]) {
            return i;
        }
    }
    return i;
}

uint8_t* extractProofValue(uint8_t rootHash[32], Bytes* path, RLPItem** stack, int stackLength) {
    Bytes *mptKey = _decodeNibbles(
        path, 0
    );

    int mptKeyOffset = 0;

    uint8_t nodeHashHash[32];
    own_memset(nodeHashHash, 0x0, 32);

    RLPItem *rlpValue;
    return (uint8_t *) "\x56\xe8\x1f\x17\x1b\xcc\x55\xa6\xff\x83\x45\xe6\x92\xc0\xf8\x6e\x5b\x48\xe0\x1b\x99\x6c\xad\xc0\x01\x62\x2f\xb5\xe3\x63\xb4\x21";
    // fuck constants && memcmp
    /*if (stackLength == 0) {
        if (memcmp(rootHash, "\x56\xe8\x1f\x17\x1b\xcc\x55\xa6\xff\x83\x45\xe6\x92\xc0\xf8\x6e\x5b\x48\xe0\x1b\x99\x6c\xad\xc0\x01\x62\x2f\xb5\xe3\x63\xb4\x21", 32) != 0) {
            exit(-1);
        }
        return 0;
    }
    */

    for (int i = 0; i < stackLength; i++) {
        uint8_t calculatedNodeHashHash[32];

        mptHashHash(
            stack[i],
            calculatedNodeHashHash
        );

        if (i != 0 && own_memcmp(nodeHashHash, calculatedNodeHashHash, 32) != 0) {
            exit(-1);
        }

        uint32_t numItems;
        RLPItem **node = toList(stack[i], &numItems);
        //for (int j=0; i< numItems; i++) {
        //    RLPItem *ri = node[j];
        //    printf("Decoded rlp items[%d]: size: %d, memptr: %x\n", j, ri[0].len, ri[0].memPtr); 
        //}
        if (numItems == 2) {
            Bytes *nodeKey;

            Bytes *convertedNode = (Bytes*) malloc(sizeof(Bytes));

            convertedNode->data = toBytes(node[0]);
            convertedNode->length = node[0]->len;

            int isLeaf = _merklePatriciaCompactDecode(convertedNode, nodeKey);

            int prefixLength = _sharedPrefixLength(
                mptKeyOffset,
                mptKey->data,
                mptKey->length,
                nodeKey->data,
                nodeKey->length
            );

            mptKeyOffset += prefixLength;

            if (prefixLength < nodeKey->length) {
                if (i < stackLength - 1) {
                    exit(-1); // TODO: Should return bytes(0)
                }

                return 0; 
            }

            if (isLeaf) {
                if (i < stackLength - 1) {
                    exit(-1);
                }

                if (mptKeyOffset < mptKey->length) {
                    return 0;
                }

                rlpValue = node[1];
                return toBytes(rlpValue);
            } else {
                if (i == stackLength - 1) {
                    exit(-1);
                }

                if (!isList(node[1])) {
                    payloadKeccak256(node[1], nodeHashHash);
                } else {
                    keccak256(node[1]->memPtr, node[1]->len, nodeHashHash);
                }
            }

        } else if (numItems == 17) {
            if (mptKeyOffset != mptKey->length) {
                uint8_t nibble = mptKey->data[mptKeyOffset];
                mptKeyOffset += 1;

                if (nibble >= 16) {
                    exit(-1);

                }

                if (_isEmptyBytesequence(node[nibble])) {
                    if (i != stackLength - 1) {
                        exit(-1);
                    }
                    return 0; // TODO: Should return bytes(0)
                } else if (!isList(node[nibble])) {
                    payloadKeccak256(node[nibble], nodeHashHash);
                } else {
                    keccak256(node[nibble]->memPtr, node[nibble]->len, nodeHashHash);
                }

            } else {
                return toBytes(node[16]);
            }
        } else {
        }
    }

    free(mptKey->data);
    free(mptKey);
    return 0;
}

int check_proof(uint8_t rootHash[32], Bytes* path, RLPItem** stack, int stackLength, uint8_t * value, uint8_t value_size) {
    uint8_t * proofed_val = extractProofValue(rootHash, path, stack, stackLength);
    for (int i=0; i< value_size; i++) {
        if (proofed_val[i] != value[i]) {
            return 0;
        }
    }
    return 1;
}


int main() {
    uint8_t rootHash[32] = {
        0xd3,0xa2,0xa6,0xd2,0x60,0x78,0xf9,0xf4,0xbe,0x12,0xf2,0x95,0x83,0x54,0x11,
        0xd4,0xf2,0xdb,0x4c,0x00,0xbb,0x1f,0xd1,0xfd,0x12,0x5f,0xe9,0x4f,0xf2,0x90,
        0xe8,0x61
    };

    uint8_t pathFixed[] = {0xd1,0x9d,0x4B,0x5d,0x35,0x82,0x58,0xf0,0x5D,0x7B,0x41,0x1E,0x21,0xA1,0x46,0x0D,0x11,0xB0,0x87,0x6F};
    uint8_t keccakPath[32];
    
    SHA3_CTX context;
    keccak_init(&context);                                                                                                                                                                                                                                                    
    keccak_update(&context, (const unsigned char*) (pathFixed), 20);                                          
    keccak_final(&context, (unsigned char*) keccakPath);
    
    Bytes *path = (Bytes *) malloc(sizeof(Bytes));
    path->data = (uint8_t*) malloc(sizeof(uint8_t) * sizeof(keccakPath));
    own_memcpy(path->data, keccakPath, sizeof(keccakPath));
    path->length = sizeof(keccakPath);
    RLPItem **rlpItems = (RLPItem **) malloc(sizeof(RLPItem*) * 16);

    uint8_t rlpproof0[]= {0xf9,0x2,0x11,0xa0,0x9e,0x6c,0x49,0x7,0x44,0xa1,0x55,0xe1,0x96,0x1,0xef,0xec,0x43,0x25,0xfb,0x8c,0x3,0x15,0x35,0x6b,0xa5,0xf0,0x39,0xc9,0x4a,0xdf,0x57,0x5,0xa8,0x1b,0x74,0xe,0xa0,0xec,0xf6,0x10,0xbd,0x60,0x77,0xbb,0xcd,0xa8,0x5f,0x3d,0xa7,0x26,0x1c,0x4,0x2d,0xbf,0x97,0x9a,0xda,0xc6,0x68,0x7c,0x84,0xd1,0xde,0x11,0x66,0x71,0x1,0x33,0x50,0xa0,0x86,0xb7,0x90,0xdd,0xd1,0x39,0x4d,0x37,0xed,0xc9,0xb1,0xf1,0x2e,0x94,0xe4,0x22,0xc4,0x27,0xe2,0xb2,0xf,0x91,0x92,0x17,0xce,0x42,0xd,0x5c,0x52,0x22,0xcb,0x56,0xa0,0xa8,0x3a,0xc6,0x52,0x2,0xc0,0xc3,0xb9,0xc5,0xe0,0xfa,0x8,0x9d,0x72,0x3a,0x49,0x75,0xf0,0x62,0x78,0x33,0x9f,0x60,0xa6,0xf7,0xe7,0xea,0x8d,0x93,0x50,0xc3,0x70,0xa0,0x41,0xfa,0xe4,0x38,0x64,0xc2,0x71,0x45,0x37,0x3a,0x78,0xa6,0xa7,0x1f,0x2b,0x41,0x24,0x23,0x6e,0x32,0x16,0xd5,0x31,0x53,0xd1,0x25,0x61,0xda,0x3e,0xe5,0x38,0x1f,0xa0,0x4c,0xbd,0xdb,0x83,0x9f,0xdf,0x96,0x8d,0x69,0x3f,0x70,0x9e,0x94,0x12,0x84,0x99,0x2e,0xc0,0x59,0x94,0x15,0x12,0x8d,0x62,0x81,0xe4,0x8f,0x73,0xdb,0x99,0x1d,0x27,0xa0,0x34,0x6f,0xe7,0xaf,0x2d,0xf0,0x91,0x4a,0x56,0x79,0x51,0x26,0x5d,0x96,0xd9,0xbc,0x65,0xa0,0xa4,0x19,0x78,0x76,0x4a,0xdb,0x27,0xf2,0x59,0x37,0x58,0xdf,0xfd,0xe,0xa0,0xff,0x66,0x4,0x6b,0x63,0xe4,0xf5,0x6c,0x9,0xda,0xdb,0x13,0xef,0x68,0x2c,0xa,0x50,0x50,0x7,0x38,0x17,0xb9,0x73,0x1,0x64,0x45,0xae,0x2c,0xb4,0xf9,0x82,0x2a,0xa0,0x67,0xfd,0x75,0xd1,0xae,0xe3,0x5d,0xc6,0x82,0xbc,0x85,0xe8,0xd6,0xc4,0x5b,0x7a,0x40,0xfa,0x84,0xf1,0x9b,0x5e,0x57,0x6d,0x92,0xdb,0x8f,0x18,0xa6,0x3a,0x2f,0xf1,0xa0,0xa,0x1,0xe9,0x8a,0x93,0x30,0x58,0x98,0xa4,0xa5,0x5f,0xc3,0x9e,0xa2,0xa3,0xb1,0x7f,0x2c,0x1,0x5e,0x80,0xb5,0x15,0xf3,0xb7,0xb,0x7,0x6d,0xbf,0x37,0x8a,0x32,0xa0,0x1a,0x4f,0xc8,0x40,0x86,0xe7,0xd,0xa3,0x80,0x94,0x6c,0xf8,0x51,0x29,0xf6,0x6e,0xc1,0xe7,0xb1,0x16,0xb8,0x5a,0x4c,0x24,0x3f,0xd5,0x56,0x51,0x8c,0x4f,0xbd,0xab,0xa0,0xff,0xfe,0x64,0x46,0xa7,0xf6,0x9f,0x3d,0xf7,0xe5,0xc8,0xf0,0x50,0x1b,0xbf,0xbf,0x38,0xbc,0xee,0x4e,0x71,0x95,0xff,0x58,0x10,0x50,0xd,0x24,0x3e,0x34,0x17,0xa,0xa0,0x6c,0xf8,0x43,0xf2,0x86,0xe4,0x76,0xee,0xf6,0x16,0xa3,0x55,0x41,0x51,0x8f,0x3c,0x2e,0xad,0xe7,0x68,0xc4,0xc,0xbb,0x86,0x89,0x15,0x1,0x56,0x71,0x2e,0x75,0xcf,0xa0,0xdd,0x1f,0x58,0xfe,0xe5,0x97,0xfe,0x82,0xd8,0x99,0x55,0x5b,0x93,0x0,0x7e,0x9c,0x88,0xb2,0x4d,0x7f,0x1f,0xfa,0xe7,0xff,0x26,0xa5,0x78,0x25,0x5a,0x50,0xf9,0xe4,0xa0,0x24,0xc8,0x12,0x9e,0xef,0x18,0x96,0x96,0x93,0x63,0xf1,0x6b,0x42,0x66,0x63,0x10,0xc8,0x10,0x12,0x54,0x2f,0x8d,0x63,0x24,0xdd,0xb4,0x7f,0xa,0x3b,0xd2,0x56,0x1d,0xa0,0x9d,0xbe,0xa,0x2f,0xfd,0xde,0x6d,0x81,0x51,0xc4,0xd7,0xa5,0xb3,0x23,0xb8,0x8a,0x78,0x25,0x5b,0x7,0x75,0xf4,0xbd,0x5,0xa,0x45,0xad,0x9a,0xd5,0xd1,0xc5,0xc5,0x80};
    uint8_t rlpproof1[]= {0xf9,0x2,0x11,0xa0,0xff,0x78,0x28,0x85,0xf1,0x2b,0x27,0x40,0xa1,0xb1,0x13,0xa,0x3a,0x80,0x73,0xdc,0x88,0x7c,0x51,0x94,0xd9,0x7f,0x73,0x83,0x5b,0x56,0xe4,0xda,0x9c,0x94,0xa0,0x84,0xa0,0x14,0x60,0x68,0x1c,0xd7,0x3e,0x74,0xaa,0xad,0x77,0x39,0x5,0xaa,0x1f,0x1a,0x39,0xe6,0x9c,0x9c,0x27,0x33,0x8f,0xb0,0x65,0x26,0x90,0xde,0x8a,0x5c,0x5f,0xec,0x45,0xa0,0xea,0x9e,0x4e,0x98,0xbc,0x5a,0xfe,0x5e,0x2e,0xed,0xa0,0xd1,0x88,0xcb,0xb5,0xc1,0x1c,0x62,0xcc,0xfd,0x3d,0x34,0x3d,0xa6,0x35,0xcd,0xbc,0x94,0x2e,0x16,0xdd,0x2e,0xa0,0xf4,0x6d,0xd4,0x2f,0xf7,0x80,0xec,0x9a,0x33,0x10,0x95,0x9d,0x96,0x78,0x19,0xab,0xb1,0x7,0xa6,0x8d,0x1,0x3d,0x6d,0x75,0x24,0x1d,0x12,0x94,0xec,0xab,0x71,0x5d,0xa0,0x3b,0xf8,0x9b,0x37,0x63,0xea,0xf3,0x3f,0x69,0x28,0x87,0x1c,0xbd,0xe6,0xf3,0xd9,0x2f,0x61,0xe0,0x20,0x7b,0x41,0x2e,0x67,0xf1,0x3,0x7e,0x45,0x4c,0xcd,0x3,0x63,0xa0,0xe6,0x51,0x5f,0x70,0x52,0x5a,0x7d,0x92,0x74,0xad,0x74,0x32,0x3d,0xc5,0x52,0xb6,0x2e,0xa2,0x78,0xf9,0xa4,0xdd,0x50,0x75,0x16,0xda,0xbd,0xb2,0x3c,0x7f,0xf3,0x45,0xa0,0x7,0xa3,0xc4,0xc8,0x1b,0x25,0xee,0xb0,0xdc,0x71,0xc1,0x14,0x72,0x3c,0x1c,0xaf,0xe0,0x5c,0x90,0xed,0x4d,0xb1,0xdb,0x91,0x6b,0xd4,0xf0,0x9,0x44,0xd3,0xa4,0xfd,0xa0,0xd2,0x3b,0xf2,0x9d,0xcb,0xa8,0x75,0x22,0xbb,0xbc,0xe0,0xb5,0xdf,0xb0,0x32,0xc6,0x80,0x7b,0xc,0x9,0x64,0x18,0x38,0x64,0xc6,0xb9,0x46,0x98,0xe1,0xfe,0x23,0xd9,0xa0,0x7a,0x87,0x5c,0xa5,0xd3,0x60,0x58,0xf,0xee,0x34,0x10,0x5d,0x18,0x79,0xa4,0x9,0xf0,0x5d,0xad,0xf5,0x95,0x5c,0xf6,0xff,0x20,0xe0,0x56,0xb9,0xd3,0xe9,0x36,0x1b,0xa0,0x3f,0x37,0xf3,0x68,0xf3,0x89,0x2b,0xc4,0x4a,0x1e,0x59,0x49,0x98,0xd6,0x65,0x5b,0xb1,0x91,0xbe,0xc5,0x16,0xef,0xa7,0x17,0x2f,0x6e,0x4c,0x21,0x36,0xbd,0xb0,0x91,0xa0,0xc6,0xd8,0x22,0x2,0x13,0xa8,0x10,0xbd,0xae,0xa7,0x2,0xb2,0xa0,0xb8,0xda,0xeb,0x23,0x3e,0xac,0x86,0xdc,0xfd,0x2e,0x29,0x46,0xf9,0xc1,0x1c,0xbb,0x18,0xd9,0x21,0xa0,0x61,0xdc,0x8c,0xda,0xc9,0x13,0x24,0x9c,0x42,0x8d,0x77,0x5a,0xd9,0x8d,0xe4,0xfe,0xd1,0x56,0xe6,0xf,0x91,0x2e,0x45,0xe5,0xc,0xc0,0x24,0xf6,0xa1,0x7b,0xef,0xdb,0xa0,0x21,0xbc,0xc6,0x7a,0x8b,0xbe,0xe8,0x48,0xa4,0xe2,0xc4,0x87,0xb2,0xa2,0x1a,0xf9,0x12,0x9b,0x76,0x9,0xa4,0x30,0x48,0xd9,0x67,0x87,0x47,0xd0,0x76,0x1c,0xdf,0x7e,0xa0,0xed,0x74,0x95,0xdc,0x90,0xf5,0x85,0x8e,0x44,0xc1,0xcf,0x7b,0x61,0x4f,0x62,0x11,0xb6,0x30,0x1a,0xf9,0x54,0xa6,0x6d,0xf7,0x42,0x10,0xb3,0x4b,0xc4,0x70,0xe5,0x31,0xa0,0xe2,0x40,0x2a,0xd7,0xf,0x46,0xbc,0x10,0x99,0xc3,0xc0,0x78,0xbd,0xb9,0x40,0x93,0x12,0xcd,0xdd,0xf7,0xad,0x9d,0xa4,0x1,0x40,0x35,0x98,0x75,0x98,0x1,0xa7,0xe6,0xa0,0x2c,0x94,0xc4,0xec,0x55,0x6,0x93,0x97,0x66,0xe,0xb1,0x3a,0x5b,0x24,0x8b,0x3b,0xcd,0xd2,0x8e,0xe0,0x73,0x7,0xb2,0x8c,0xf8,0xc4,0xc7,0x65,0x86,0xc7,0xdb,0x5b,0x80};
    uint8_t rlpproof2[]= {0xf9,0x2,0x11,0xa0,0x76,0x0,0x40,0x55,0x55,0x8a,0x55,0x6,0x8,0xd3,0x6f,0xfb,0x43,0x8,0xb0,0x38,0xe,0x48,0x7f,0xce,0x4,0x1,0xfd,0xb9,0x46,0x82,0x31,0xf8,0x7d,0x3d,0x9b,0x7b,0xa0,0x46,0x1b,0x45,0x78,0x3f,0x56,0x5,0x6c,0x74,0xb0,0x99,0xe5,0x30,0xca,0xbe,0x91,0x2c,0x4b,0xfc,0x8d,0x9d,0xd9,0x4d,0x67,0x47,0x4c,0xbb,0xe7,0xdd,0xbe,0xe6,0x6f,0xa0,0xc0,0x41,0x2f,0xa0,0xad,0x2,0xf,0xf2,0x4b,0x18,0xe8,0x7b,0x3c,0xb0,0x84,0x61,0x5d,0x21,0xbb,0x1c,0x1e,0x38,0x31,0xe9,0x18,0x22,0x4c,0x21,0xfc,0xe3,0x3f,0x29,0xa0,0x63,0x10,0xf2,0x83,0x3f,0x97,0xac,0xa5,0x4b,0x4e,0x52,0x47,0x1d,0xd0,0xf2,0xa8,0xd0,0x38,0xcc,0xc6,0x55,0x26,0xbb,0x7f,0xb,0x4b,0x33,0xc9,0x6d,0x39,0xe9,0x2d,0xa0,0x50,0x34,0x91,0xf4,0x88,0x20,0x74,0x21,0x68,0xdb,0x6f,0xc3,0x18,0x3,0x99,0xba,0x2f,0xcc,0xd7,0xe9,0x89,0x0,0xd2,0x9a,0xcb,0xac,0x71,0xfd,0xf0,0xac,0x62,0x5c,0xa0,0xa7,0xf9,0xe,0xd5,0x86,0x32,0x51,0x8c,0x97,0x7b,0x24,0x83,0xfd,0x91,0x91,0x7c,0x15,0x7f,0x65,0x1a,0xa3,0xf7,0xdb,0x52,0x77,0x9e,0xfc,0x81,0x76,0x89,0x46,0x34,0xa0,0x2,0x7b,0x9d,0xdb,0xf6,0x3e,0x51,0x96,0x7d,0x10,0xa3,0x41,0xc,0x80,0xd1,0x46,0x58,0x6e,0x58,0xcd,0x21,0xc6,0x37,0x6d,0xb2,0x43,0xab,0x48,0xdf,0xeb,0xde,0xba,0xa0,0xaa,0x31,0xa4,0x9e,0xc7,0x14,0x5a,0xd6,0xf6,0x0,0x48,0xee,0xdb,0x61,0xc6,0xdd,0x66,0xa6,0xae,0x44,0xa6,0xd1,0x22,0xcd,0xa5,0x19,0xf3,0xef,0x86,0xa2,0xef,0x29,0xa0,0x33,0x1c,0xb3,0x36,0x4a,0x40,0x6a,0xed,0xff,0x23,0x67,0x4f,0xbc,0x74,0x51,0xa0,0x92,0x6c,0xeb,0x23,0x29,0x29,0xe3,0xb4,0x15,0xfe,0x8a,0xb3,0x43,0xe6,0xdd,0x4e,0xa0,0xd8,0xbb,0xc1,0x2d,0xe0,0x15,0x79,0xf3,0xdf,0xc0,0xff,0x9c,0x2e,0x9f,0x31,0x37,0xe7,0xf0,0xbe,0x8d,0x1b,0xa1,0xc,0xfa,0xe7,0x9d,0xc2,0x94,0x93,0x4d,0x26,0xe4,0xa0,0x8a,0xe,0xb3,0xbc,0x9a,0x9,0x2b,0xab,0xd4,0x42,0xee,0x57,0x93,0x83,0x19,0x58,0x96,0xae,0xbb,0x51,0xc6,0x93,0xac,0x75,0xbc,0x56,0xb0,0x29,0xba,0xea,0x22,0xfd,0xa0,0x6e,0xe1,0xeb,0xa9,0xb5,0x4a,0x41,0xe3,0xe1,0xc2,0x50,0x9e,0xc4,0x9c,0xe7,0x45,0x54,0x49,0xf4,0xe8,0x8b,0x1a,0xe2,0xd0,0x71,0xb4,0x7d,0x8c,0x53,0x9c,0x1a,0xe8,0xa0,0x1e,0xab,0x2c,0x80,0x34,0x82,0x68,0x6f,0x59,0x2c,0x88,0x64,0x6d,0x83,0x7f,0x2f,0xff,0xda,0x17,0xb4,0x70,0x81,0x2e,0x7e,0x88,0x35,0x40,0x56,0xd,0x20,0x86,0x9f,0xa0,0x7b,0xe9,0x4b,0xb6,0x5,0x20,0xad,0xee,0xd8,0x1c,0xdb,0x31,0x7a,0xd9,0x91,0xba,0x22,0x54,0x61,0xde,0x92,0xd2,0x9e,0xdb,0x9b,0x9a,0x11,0x1a,0xe4,0xd6,0x42,0x49,0xa0,0x9a,0x96,0xf,0x1c,0x84,0x3e,0xbb,0xf1,0xb,0x13,0xa8,0x3b,0x9b,0x67,0x70,0x11,0x36,0x1c,0xdd,0x9f,0x54,0x50,0x8a,0x61,0x70,0x2a,0x33,0x77,0x32,0x11,0x1f,0x70,0xa0,0x60,0x22,0x45,0x88,0x1d,0x9f,0xd4,0x6e,0xa7,0x66,0xee,0x21,0x9e,0xee,0xe7,0x37,0x9,0x6d,0xa8,0xa6,0xda,0xe9,0x52,0x1b,0xcb,0x3b,0x79,0xe8,0xda,0x2a,0xde,0xf3,0x80};
    uint8_t rlpproof3[]= {0xf9,0x2,0x11,0xa0,0x48,0x4d,0xba,0x0,0x5d,0xa9,0x63,0xf5,0x13,0x5d,0x85,0xc9,0xc4,0x4a,0xee,0xb1,0xe8,0xdf,0x8a,0xbd,0x7d,0xe8,0x54,0xa,0x83,0xa8,0xfd,0xeb,0xb,0x3a,0x24,0xaf,0xa0,0x69,0x4f,0x70,0x3c,0xdf,0x35,0x13,0x86,0x94,0x5b,0xe4,0xba,0x56,0xc0,0x42,0xd1,0x85,0x2d,0x63,0xba,0x3e,0x1d,0xad,0x84,0x72,0x2f,0xe5,0x55,0xac,0x24,0xa4,0xf7,0xa0,0xd0,0x40,0x68,0xcd,0x90,0x55,0xfb,0x5b,0x6c,0xd3,0x57,0x12,0x2,0xb7,0xda,0xfd,0x2a,0x74,0x94,0xbd,0x7d,0xa2,0x6,0x1c,0x1a,0x68,0x1e,0xe7,0xb9,0x70,0x9c,0x4c,0xa0,0xc4,0x28,0xf5,0x87,0x2d,0x17,0x28,0x3f,0x12,0x15,0xe6,0x9d,0x93,0xa4,0x1c,0x86,0x5,0x17,0x67,0x99,0x48,0x6e,0x64,0x8e,0xcc,0xd4,0x87,0x43,0x85,0x8a,0x42,0xf9,0xa0,0x32,0x29,0xf0,0x89,0x77,0xd7,0x0,0x58,0xd7,0xdf,0x68,0x2d,0xbb,0xd4,0x23,0xb6,0xa2,0x8e,0x1,0x26,0x6c,0x9,0xaf,0x1e,0xe1,0x41,0xd9,0x35,0xed,0xf5,0x2d,0xa9,0xa0,0x7b,0x91,0xdb,0x48,0x82,0x5d,0x9d,0x38,0xef,0xf4,0xa4,0xd,0x27,0x35,0xf5,0x79,0xd5,0xd1,0x47,0x30,0xd1,0x30,0x92,0xe5,0x16,0xd8,0xd0,0x98,0xd5,0xeb,0x9,0x77,0xa0,0x76,0xd5,0x7b,0x8d,0x66,0xf7,0x71,0x47,0x70,0x4d,0x88,0x5b,0xdb,0x4b,0x2c,0xc0,0x9c,0x6e,0xf,0x3f,0xab,0x1a,0xd,0xe8,0x6,0xd5,0x15,0x58,0x71,0x44,0xb3,0xb6,0xa0,0xec,0xf8,0xae,0xbc,0x6d,0xb4,0x50,0x86,0x1a,0x5a,0x7e,0x11,0x89,0xbb,0x6a,0x70,0xcd,0x51,0x29,0x22,0x61,0x9a,0x2e,0x37,0x99,0xff,0xf2,0xc8,0x41,0xb9,0x6e,0x2f,0xa0,0xd4,0xed,0x88,0x2,0xab,0x3d,0x86,0xec,0xe,0xf5,0x97,0x79,0x40,0x84,0xa9,0x32,0xac,0x5,0xd2,0xe7,0x92,0x44,0x5a,0x37,0xf,0x85,0xfb,0x48,0x55,0x8b,0xfe,0x6d,0xa0,0xb1,0x90,0x67,0xa5,0x35,0xe5,0x4c,0x96,0x7c,0x97,0x11,0xff,0x68,0x54,0x32,0xfd,0xfc,0x1,0x78,0x49,0xb4,0xe4,0x85,0xee,0x70,0x4,0x5f,0x31,0xe6,0xf4,0x33,0xa9,0xa0,0x51,0xbf,0x86,0x1e,0x6f,0xc,0xdc,0x3d,0x11,0xe4,0x2d,0xb5,0x4e,0x65,0x84,0x66,0xd1,0x0,0xb0,0xb3,0x10,0x3a,0x44,0x5b,0xd,0xf5,0xb7,0xb7,0x6a,0xf1,0x79,0xa6,0xa0,0xc,0xb6,0x27,0x37,0x71,0xb3,0xdc,0xad,0x80,0xb6,0xc8,0x2a,0x7b,0xdf,0x92,0x9,0x21,0x40,0x6b,0x6f,0xef,0xe8,0x2b,0xd2,0x49,0xb8,0x4c,0x65,0xce,0xe1,0x67,0xd2,0xa0,0x3f,0x32,0x8d,0x8b,0xf,0x30,0x3a,0x67,0x5e,0x5d,0xbc,0x2b,0xa9,0x89,0x9d,0xd9,0x61,0xbf,0xa,0x16,0xdd,0x5b,0x4e,0xbf,0x9e,0xfb,0x31,0xfa,0x8f,0x5,0xdb,0xf5,0xa0,0xd7,0x5f,0x5,0xb9,0x86,0x89,0x9c,0x1e,0xa4,0x8c,0x48,0x73,0x11,0x9d,0x0,0x5c,0x75,0xc1,0x5f,0xd1,0x80,0xcc,0xed,0x76,0x18,0x44,0x45,0xa7,0x30,0xbc,0xac,0xde,0xa0,0x47,0x71,0x78,0xfd,0x4,0xe8,0x2b,0x3b,0x6e,0xd7,0x9,0xe6,0x79,0x86,0x9e,0x6d,0x44,0x39,0x73,0x98,0x10,0xea,0x82,0x5b,0xe6,0x2a,0x1,0x4a,0xe0,0xc5,0x5c,0xd7,0xa0,0xe1,0xfa,0x2c,0x34,0xc0,0xfd,0x28,0x21,0xac,0x10,0x8e,0xcd,0x33,0x15,0x35,0xe0,0xd3,0x2,0x5b,0xbf,0x6,0xfe,0xe3,0x38,0xf0,0x14,0x4e,0xf8,0x52,0xe7,0xe0,0x10,0x80};
    uint8_t rlpproof4[]= {0xf9,0x2,0x11,0xa0,0x9d,0x8b,0x83,0x42,0x55,0xc3,0xf2,0xd7,0xaf,0x40,0x82,0x45,0xd4,0x94,0xd4,0x9e,0x0,0x3e,0x19,0xf9,0x71,0xec,0xb6,0xb0,0x6e,0xd7,0xaf,0x26,0x2f,0x23,0x74,0x7d,0xa0,0x57,0x71,0x1,0x4d,0xb0,0x85,0x46,0xbb,0x9,0xca,0x48,0xff,0x38,0x30,0xe5,0x1e,0x32,0xf9,0xbb,0xcd,0xc7,0x96,0x64,0xf4,0x78,0x89,0x5,0xbe,0xf6,0xe4,0xbc,0x3a,0xa0,0x8c,0x66,0x37,0x29,0x97,0xae,0x88,0xd5,0x4c,0x96,0x2f,0x5e,0xf8,0x83,0xa9,0xcf,0x5a,0x16,0xae,0x4c,0x42,0x48,0x3,0xb7,0x42,0xf,0x6f,0xa9,0xad,0x5b,0x1a,0x61,0xa0,0xc6,0x66,0xc6,0x81,0x81,0x4e,0x2b,0xf9,0xb6,0xa9,0x55,0x25,0x3,0x74,0xc6,0x17,0x40,0xd9,0x8c,0x9f,0x50,0x5a,0x3d,0xcb,0xea,0xe9,0x2b,0xce,0xc5,0x31,0x38,0x10,0xa0,0x8c,0xdc,0x15,0xf4,0xd6,0x33,0xc0,0x13,0xa2,0xf7,0x19,0x8c,0xff,0x9e,0xf,0x76,0x97,0x89,0xc2,0x56,0x58,0xa8,0xca,0xef,0xf5,0x2e,0xda,0xb,0x54,0xf5,0x86,0x40,0xa0,0x6c,0x94,0x3f,0xe,0xce,0x24,0x23,0x43,0xc9,0xe2,0x90,0x94,0x22,0xcd,0x39,0x12,0x55,0x32,0x44,0xf6,0x4f,0x6e,0xf,0xe8,0xe3,0xe9,0xdb,0xfa,0x88,0x7e,0x2d,0x4,0xa0,0xb6,0xd7,0x9e,0x66,0x52,0x73,0xfc,0x75,0x91,0xdb,0x5b,0x5d,0xbc,0x4b,0x4a,0x7c,0x71,0x40,0xad,0x26,0xff,0x5e,0xa,0x23,0x53,0x2b,0x7c,0xee,0xec,0xc7,0xa1,0x47,0xa0,0xbc,0x38,0xf8,0x10,0x1e,0xb3,0x6a,0x2d,0xd7,0x45,0x60,0x92,0x29,0xf5,0xc0,0x4a,0xe7,0x66,0x8f,0x93,0xa2,0xe,0x66,0x5c,0x56,0xf2,0xfc,0x3c,0x9,0xab,0x8d,0x20,0xa0,0x65,0xa9,0xc3,0xc0,0x2,0xa1,0x76,0xc7,0x79,0x5e,0x17,0x8c,0xf2,0xe6,0x3c,0x6b,0x91,0x2e,0xaa,0x29,0xd0,0x65,0x75,0xf9,0x48,0x81,0xa1,0x11,0x2b,0x4d,0x42,0xd0,0xa0,0x76,0xd4,0xa,0x25,0x46,0x73,0xc3,0x68,0xb1,0xeb,0x88,0x70,0x36,0x3f,0xd3,0x10,0xc9,0x86,0xf2,0x96,0xeb,0x4c,0x92,0xb6,0xac,0x41,0x8e,0x4a,0x13,0x70,0x45,0x66,0xa0,0x4e,0x33,0x53,0x16,0x3d,0xee,0x6d,0x1,0x12,0x24,0x62,0x7c,0x9b,0xb1,0x8a,0xd7,0x69,0x5a,0xca,0x14,0xb1,0x6e,0x66,0xdf,0xe5,0xc0,0x7,0xed,0x8c,0x5,0x80,0x87,0xa0,0xfa,0x12,0xe7,0x9,0xb,0x38,0xe3,0xa7,0x77,0x45,0xfa,0xa8,0x90,0xf7,0xf4,0xdd,0x87,0x9d,0x33,0xb4,0xf7,0x98,0x87,0x57,0x8c,0xe4,0x72,0xe0,0x62,0x59,0xd5,0x56,0xa0,0x37,0x43,0x8e,0x66,0xdd,0xc3,0x5e,0x4f,0x33,0xb3,0x6f,0x2a,0xb0,0xd0,0x9b,0x9f,0x71,0x8d,0x50,0xfc,0xf,0x1c,0x63,0xb0,0xf,0xda,0x41,0x2,0x64,0x33,0xed,0xaf,0xa0,0x48,0xdd,0x6c,0xea,0xc7,0x91,0x17,0x55,0xbd,0x41,0x5e,0xad,0xfd,0xcf,0xf3,0x6e,0x64,0xca,0x13,0xfb,0x30,0x75,0x47,0x90,0x9f,0xe6,0x21,0x7,0x88,0xcf,0xa2,0xdd,0xa0,0x3b,0xdb,0x22,0xa0,0xc,0xb7,0x63,0xfd,0xb5,0xff,0xe,0xe0,0xf1,0xf1,0x7c,0xa,0xf8,0xcf,0x55,0x13,0x79,0x6,0xbe,0xc9,0x36,0xae,0x74,0x99,0x64,0xe3,0x66,0x9d,0xa0,0xa0,0xd9,0x57,0x41,0xc6,0x4e,0xa1,0xb1,0xd,0xb7,0x23,0xae,0x63,0xb5,0x11,0x5f,0x1d,0xff,0xcd,0x8d,0x75,0x19,0x98,0x6f,0xb2,0x64,0x43,0xdd,0x6,0x38,0x3,0xa0,0x80};
    uint8_t rlpproof5[]= {0xf9,0x2,0x11,0xa0,0x4a,0x96,0x88,0xa6,0x7e,0x32,0x59,0xa8,0xf2,0x58,0xb6,0x50,0xfa,0x1e,0xe0,0x7f,0xc1,0x22,0x62,0x5a,0x2e,0xdc,0x93,0xfd,0x74,0xb3,0xca,0x71,0x5b,0xe4,0x7a,0x29,0xa0,0x94,0xda,0x18,0x2e,0xfc,0xad,0x85,0xc8,0x41,0x93,0x10,0x50,0x83,0xcf,0x9c,0xaa,0xa7,0x2b,0x8a,0xba,0x5f,0x84,0xe9,0x84,0x82,0x11,0x38,0x7b,0x14,0xf0,0x41,0xbc,0xa0,0x74,0x66,0xe,0xc2,0xdf,0xfb,0xf4,0x35,0x35,0x22,0x46,0xf9,0x2f,0x88,0x1c,0xda,0x8e,0x9e,0x69,0x88,0x1d,0xcd,0x31,0xc3,0x1f,0xaa,0x7b,0xd5,0xc4,0xd2,0x8f,0x28,0xa0,0x8a,0x30,0xa9,0x31,0xbb,0x5b,0xa7,0x38,0x4c,0xb4,0x71,0xf6,0x27,0xc8,0x95,0x3b,0xa4,0x48,0xc0,0x2b,0x88,0x6d,0xe5,0xa8,0xfe,0x85,0xb,0x8e,0x8d,0xbd,0x80,0xa3,0xa0,0x32,0xd0,0x0,0x91,0x7,0x71,0x6a,0x2,0xdb,0x9a,0x1c,0x32,0xfe,0x9e,0xd1,0xd9,0x64,0x19,0x3,0xde,0x96,0xcf,0x25,0x14,0x3c,0xcb,0x87,0x5e,0x4,0x64,0x76,0x46,0xa0,0xcd,0xf8,0xe1,0xa9,0x66,0xff,0x8f,0x99,0xdd,0x73,0x98,0xc4,0x9e,0x0,0x31,0x24,0x1f,0xa5,0x7c,0xf1,0x9a,0x7c,0x2d,0xf3,0xfe,0x28,0xa0,0x96,0x71,0x84,0x35,0x80,0xa0,0x3c,0x10,0x70,0xcc,0x8,0x15,0x2c,0x5f,0x7c,0x8b,0x64,0xce,0xc3,0x40,0x2b,0xbb,0x42,0xad,0x4f,0xb9,0xcd,0x4a,0xb5,0x23,0xc6,0xfd,0xd9,0xbc,0xe8,0x6c,0x16,0xe7,0xa0,0x33,0xd1,0xe,0xa3,0xd1,0x5c,0x81,0x32,0x6d,0xb9,0x33,0x35,0xae,0xe2,0x15,0xb9,0x80,0xb1,0x1e,0x55,0x31,0x91,0x4c,0x35,0xb9,0xb6,0x51,0xc2,0x33,0x6a,0xfa,0x21,0xa0,0x4,0xd7,0x1e,0xbb,0x45,0xfe,0xa0,0x22,0x2a,0xb2,0xcc,0xf8,0xb4,0xdd,0xec,0x96,0x7e,0xa2,0x8d,0x52,0x2d,0x1f,0x9d,0xe6,0xd,0xdc,0x91,0x27,0x64,0xab,0x57,0x75,0xa0,0x90,0x6,0x99,0xb7,0xd0,0x25,0x7f,0x4e,0x6c,0x15,0xd0,0xce,0xcd,0x92,0x56,0xe1,0x56,0x7b,0x71,0x6d,0xea,0xd5,0x2c,0x82,0x5e,0x42,0x1d,0x17,0xd9,0xd2,0xea,0x52,0xa0,0x4c,0x4d,0x86,0xb7,0x81,0x23,0x9a,0x16,0x2a,0xf,0x9,0x5a,0xba,0x57,0x0,0x3,0xfe,0x9c,0xc0,0x88,0x8e,0x43,0x8a,0xfa,0xbf,0xe5,0x9e,0x93,0x52,0x28,0x79,0xa1,0xa0,0xe8,0xe0,0xcc,0xc6,0x87,0x8f,0x2,0xb4,0xf1,0xfd,0xd2,0x27,0x9d,0xa1,0xd5,0xf4,0x25,0x87,0x8,0x1d,0x53,0x2e,0xad,0x3d,0xa9,0xc6,0x88,0xf2,0x6b,0xa3,0x9a,0x89,0xa0,0x7c,0xfe,0x16,0xf3,0x2,0x27,0xcf,0xd4,0x1e,0x31,0xea,0xe,0x5d,0x79,0x58,0x20,0x8c,0x89,0x75,0x7c,0x87,0x6e,0x94,0x7,0x81,0x4a,0x44,0xd7,0x32,0xcd,0x78,0x2b,0xa0,0xc9,0x94,0xa9,0xf9,0x3c,0xf8,0xb9,0x98,0x47,0xdd,0x4,0xc1,0xb5,0x8b,0x60,0x90,0xd,0x64,0x44,0x6,0xaa,0x21,0x72,0x3c,0x85,0x1f,0x30,0x20,0x75,0x93,0xa2,0x3e,0xa0,0x33,0x98,0x2d,0xa7,0x95,0x3c,0x89,0x60,0x54,0xc2,0xed,0x7a,0xfd,0x44,0xc4,0x67,0x60,0x5d,0x4d,0x95,0x82,0x48,0xad,0xc4,0xf9,0x78,0x89,0x46,0xb8,0x3f,0x36,0xd7,0xa0,0x98,0xb2,0x2b,0x27,0xd5,0x9a,0xaa,0x4a,0xb9,0x54,0x5c,0x70,0xac,0xcf,0xd8,0xde,0xb2,0xd8,0x15,0xb3,0x5a,0xf1,0xd,0x89,0xa6,0x9c,0xcd,0x82,0xc3,0x88,0x69,0x12,0x80};
    uint8_t rlpproof6[]= {0xf9,0x1,0x31,0x80,0xa0,0x84,0x48,0x85,0xfa,0xd7,0x2a,0x42,0x2b,0x9b,0x1b,0xeb,0xb5,0x41,0x79,0xa2,0x51,0x24,0x41,0xed,0xbb,0x48,0x6c,0xea,0x95,0x91,0xc5,0x17,0x46,0x1a,0xa7,0xa2,0x97,0x80,0xa0,0x61,0x18,0xee,0xaf,0xd9,0x1a,0x10,0xca,0xad,0x94,0x66,0xa8,0x47,0x2b,0x35,0x14,0x76,0xbd,0xc7,0xa0,0xf,0xc9,0xca,0x2e,0xb5,0x76,0x0,0x46,0xa2,0x99,0x45,0x39,0x80,0xa0,0x92,0x4f,0x8,0x13,0x76,0x96,0x2c,0x1a,0xa4,0x1a,0x97,0xd,0xfc,0x8,0xc,0xe,0x39,0x0,0x1c,0x44,0x8c,0x99,0x95,0x29,0x34,0x87,0xd7,0xe4,0xb1,0xf2,0x68,0x31,0x80,0xa0,0xb3,0x3a,0x6f,0x69,0xa9,0x27,0x13,0x30,0x53,0xf4,0xa4,0xa1,0xe3,0xbf,0x6c,0x49,0xad,0x66,0x49,0x8c,0xee,0xe9,0x3d,0x1b,0xa6,0x30,0xc0,0x90,0x42,0x62,0x4b,0x80,0x80,0xa0,0x73,0xc7,0x49,0x74,0x3b,0xa3,0xc1,0x6d,0xac,0xbb,0x96,0xcd,0x6f,0xb4,0x32,0xdb,0xfb,0x21,0xa1,0xec,0x54,0x54,0xdd,0xed,0xed,0xed,0x3d,0x9e,0xa1,0xdb,0x1b,0xe0,0xa0,0x6,0x26,0x57,0x34,0xb2,0xae,0x70,0xd2,0x36,0xcc,0x10,0x73,0x3c,0x71,0xc4,0x4d,0x70,0x98,0xd0,0x72,0x2,0xf8,0xa8,0x75,0xc9,0xdc,0x1e,0x82,0xa9,0xb2,0xc0,0xdd,0x80,0xa0,0xf6,0x34,0x4,0xf8,0x2d,0xc2,0x73,0xab,0xa0,0xcb,0x74,0x2f,0x22,0xb0,0x9f,0x5c,0x4e,0x95,0x80,0x8e,0x1b,0xd9,0x13,0x38,0x10,0x5f,0x59,0x93,0xc5,0xb7,0xdc,0x24,0xa0,0x64,0x7a,0x8e,0xf0,0x36,0x83,0x7a,0xc9,0x1e,0xba,0x3a,0x85,0x5,0x6c,0xba,0xbc,0xc7,0x7,0xfd,0x90,0xdb,0x5,0x73,0xbd,0x7,0x39,0xd0,0x70,0x9d,0x23,0x3a,0xa2,0x80,0xa0,0xe1,0xe8,0x3e,0x52,0x2f,0xc4,0xfb,0x9b,0x6e,0x2a,0x67,0x8d,0x37,0x15,0x96,0x47,0xff,0x34,0x4,0xa3,0xac,0x52,0xf1,0x0,0x23,0xe7,0xb1,0x69,0x9f,0xd6,0xd3,0x91,0x80};
    uint8_t rlpproof7[]= {0xf8,0x51,0xa0,0x49,0x78,0x33,0x24,0x5b,0x37,0xe,0xc5,0x78,0xcb,0xc1,0x2,0x4,0x29,0x85,0x86,0x7f,0xe2,0x32,0x74,0xab,0xa,0x2d,0xd9,0xee,0x5d,0x11,0xcf,0x10,0x6a,0xf6,0x4a,0x80,0x80,0x80,0x80,0x80,0x80,0xa0,0xd,0x7d,0xd5,0xb7,0x66,0x5,0x83,0x5,0x3b,0xb9,0x62,0x68,0xd6,0x27,0x5,0x41,0x96,0x82,0x7d,0x15,0x6c,0x7,0x3,0xe7,0xb7,0x5e,0x61,0xdd,0x3,0x71,0xca,0xdc,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80};
    uint8_t rlpproof8[]= {0xf8,0x70,0x9d,0x20,0x3d,0xb1,0x44,0xee,0x84,0xcf,0xbf,0xe3,0x90,0x1e,0xe8,0x36,0xb6,0xbf,0xe3,0x4d,0x25,0x86,0xb5,0xb6,0x74,0x3c,0xf2,0x16,0x80,0x28,0x29,0xb8,0xb8,0x50,0xf8,0x4e,0x1,0x8a,0x3,0x27,0x9e,0xe7,0xa5,0x54,0xa,0xc0,0x47,0xc8,0xa0,0x7b,0x21,0x70,0xeb,0x13,0x42,0x8,0x2d,0x77,0x52,0xa9,0x67,0xe,0xdb,0x1c,0x3f,0x18,0xbf,0x23,0xb8,0xaf,0x1d,0x23,0x13,0x6a,0x46,0x27,0xfe,0xa3,0x40,0xcf,0xf,0xa0,0x4d,0x9b,0xe6,0x48,0xc5,0xbf,0x39,0x97,0x36,0x70,0xd9,0xf8,0xb4,0x81,0xd5,0xd0,0xb9,0x71,0xe6,0xa2,0xdb,0x2d,0xec,0xcc,0x6b,0x98,0xcd,0xe2,0x1c,0x5d,0xd8,0x3e};

    uint8_t **proofs = (uint8_t **)malloc(9 * sizeof(uint8_t*));
    proofs[0] = rlpproof0;
    proofs[1] = rlpproof1;
    proofs[2] = rlpproof2;
    proofs[3] = rlpproof3;
    proofs[4] = rlpproof4;
    proofs[5] = rlpproof5;
    proofs[6] = rlpproof6;
    proofs[7] = rlpproof7;
    proofs[8] = rlpproof8;
    
    int sizes[9] = {
        sizeof(rlpproof0),
        sizeof(rlpproof1),
        sizeof(rlpproof2),
        sizeof(rlpproof3),
        sizeof(rlpproof4),
        sizeof(rlpproof5),
        sizeof(rlpproof6),
        sizeof(rlpproof7),
        sizeof(rlpproof8)
    };
 
    for (int i = 0; i < 9; i++) {
        rlpItems[i] = (RLPItem*) malloc(sizeof(RLPItem));
        rlpItems[i]->memPtr = (uint8_t*) malloc(sizes[i]);
        rlpItems[i]->len = sizes[i];

        own_memcpy(rlpItems[i]->memPtr, proofs[i], sizes[i]);
    }

    uint8_t * mocked_return = (uint8_t *) "\x56\xe8\x1f\x17\x1b\xcc\x55\xa6\xff\x83\x45\xe6\x92\xc0\xf8\x6e\x5b\x48\xe0\x1b\x99\x6c\xad\xc0\x01\x62\x2f\xb5\xe3\x63\xb4\x21";
    uint8_t * ret = extractProofValue(rootHash, path, rlpItems, 9);
    if (!own_memcmp(ret, mocked_return, 32)) {
        return 0;
    }
    return 666;

}


#ifdef __ZKLLVM__
bool is_same(typename hashes::sha2<256>::block_type block0,
    typename hashes::sha2<256>::block_type block1){

    return block0[0] == block1[0] && block0[1] == block1[1];
}

[[circuit]] bool
    validate_path(typename pallas::base_field_type::value_type unused) {

    uint8_t rootHash[32] = {
        0xd3,0xa2,0xa6,0xd2,0x60,0x78,0xf9,0xf4,0xbe,0x12,0xf2,0x95,0x83,0x54,0x11,
        0xd4,0xf2,0xdb,0x4c,0x00,0xbb,0x1f,0xd1,0xfd,0x12,0x5f,0xe9,0x4f,0xf2,0x90,
        0xe8,0x61
    };

    uint8_t pathFixed[] = {0xd1,0x9d,0x4B,0x5d,0x35,0x82,0x58,0xf0,0x5D,0x7B,0x41,0x1E,0x21,0xA1,0x46,0x0D,0x11,0xB0,0x87,0x6F};
    uint8_t keccakPath[32];
    
    SHA3_CTX context;
    keccak_init(&context);                                                                                                                                                                                                                                                    
    keccak_update(&context, (const unsigned char*) (pathFixed), 20);                                          
    keccak_final(&context, (unsigned char*) keccakPath);
    
    Bytes *path = (Bytes *) malloc(sizeof(Bytes));
    path->data = (uint8_t*) malloc(sizeof(uint8_t) * sizeof(keccakPath));
    own_memcpy(path->data, keccakPath, sizeof(keccakPath));
    path->length = sizeof(keccakPath);
    RLPItem **rlpItems = (RLPItem **) malloc(sizeof(RLPItem*) * 16);

    uint8_t rlpproof0[]= {0xf9,0x2,0x11,0xa0,0x9e,0x6c,0x49,0x7,0x44,0xa1,0x55,0xe1,0x96,0x1,0xef,0xec,0x43,0x25,0xfb,0x8c,0x3,0x15,0x35,0x6b,0xa5,0xf0,0x39,0xc9,0x4a,0xdf,0x57,0x5,0xa8,0x1b,0x74,0xe,0xa0,0xec,0xf6,0x10,0xbd,0x60,0x77,0xbb,0xcd,0xa8,0x5f,0x3d,0xa7,0x26,0x1c,0x4,0x2d,0xbf,0x97,0x9a,0xda,0xc6,0x68,0x7c,0x84,0xd1,0xde,0x11,0x66,0x71,0x1,0x33,0x50,0xa0,0x86,0xb7,0x90,0xdd,0xd1,0x39,0x4d,0x37,0xed,0xc9,0xb1,0xf1,0x2e,0x94,0xe4,0x22,0xc4,0x27,0xe2,0xb2,0xf,0x91,0x92,0x17,0xce,0x42,0xd,0x5c,0x52,0x22,0xcb,0x56,0xa0,0xa8,0x3a,0xc6,0x52,0x2,0xc0,0xc3,0xb9,0xc5,0xe0,0xfa,0x8,0x9d,0x72,0x3a,0x49,0x75,0xf0,0x62,0x78,0x33,0x9f,0x60,0xa6,0xf7,0xe7,0xea,0x8d,0x93,0x50,0xc3,0x70,0xa0,0x41,0xfa,0xe4,0x38,0x64,0xc2,0x71,0x45,0x37,0x3a,0x78,0xa6,0xa7,0x1f,0x2b,0x41,0x24,0x23,0x6e,0x32,0x16,0xd5,0x31,0x53,0xd1,0x25,0x61,0xda,0x3e,0xe5,0x38,0x1f,0xa0,0x4c,0xbd,0xdb,0x83,0x9f,0xdf,0x96,0x8d,0x69,0x3f,0x70,0x9e,0x94,0x12,0x84,0x99,0x2e,0xc0,0x59,0x94,0x15,0x12,0x8d,0x62,0x81,0xe4,0x8f,0x73,0xdb,0x99,0x1d,0x27,0xa0,0x34,0x6f,0xe7,0xaf,0x2d,0xf0,0x91,0x4a,0x56,0x79,0x51,0x26,0x5d,0x96,0xd9,0xbc,0x65,0xa0,0xa4,0x19,0x78,0x76,0x4a,0xdb,0x27,0xf2,0x59,0x37,0x58,0xdf,0xfd,0xe,0xa0,0xff,0x66,0x4,0x6b,0x63,0xe4,0xf5,0x6c,0x9,0xda,0xdb,0x13,0xef,0x68,0x2c,0xa,0x50,0x50,0x7,0x38,0x17,0xb9,0x73,0x1,0x64,0x45,0xae,0x2c,0xb4,0xf9,0x82,0x2a,0xa0,0x67,0xfd,0x75,0xd1,0xae,0xe3,0x5d,0xc6,0x82,0xbc,0x85,0xe8,0xd6,0xc4,0x5b,0x7a,0x40,0xfa,0x84,0xf1,0x9b,0x5e,0x57,0x6d,0x92,0xdb,0x8f,0x18,0xa6,0x3a,0x2f,0xf1,0xa0,0xa,0x1,0xe9,0x8a,0x93,0x30,0x58,0x98,0xa4,0xa5,0x5f,0xc3,0x9e,0xa2,0xa3,0xb1,0x7f,0x2c,0x1,0x5e,0x80,0xb5,0x15,0xf3,0xb7,0xb,0x7,0x6d,0xbf,0x37,0x8a,0x32,0xa0,0x1a,0x4f,0xc8,0x40,0x86,0xe7,0xd,0xa3,0x80,0x94,0x6c,0xf8,0x51,0x29,0xf6,0x6e,0xc1,0xe7,0xb1,0x16,0xb8,0x5a,0x4c,0x24,0x3f,0xd5,0x56,0x51,0x8c,0x4f,0xbd,0xab,0xa0,0xff,0xfe,0x64,0x46,0xa7,0xf6,0x9f,0x3d,0xf7,0xe5,0xc8,0xf0,0x50,0x1b,0xbf,0xbf,0x38,0xbc,0xee,0x4e,0x71,0x95,0xff,0x58,0x10,0x50,0xd,0x24,0x3e,0x34,0x17,0xa,0xa0,0x6c,0xf8,0x43,0xf2,0x86,0xe4,0x76,0xee,0xf6,0x16,0xa3,0x55,0x41,0x51,0x8f,0x3c,0x2e,0xad,0xe7,0x68,0xc4,0xc,0xbb,0x86,0x89,0x15,0x1,0x56,0x71,0x2e,0x75,0xcf,0xa0,0xdd,0x1f,0x58,0xfe,0xe5,0x97,0xfe,0x82,0xd8,0x99,0x55,0x5b,0x93,0x0,0x7e,0x9c,0x88,0xb2,0x4d,0x7f,0x1f,0xfa,0xe7,0xff,0x26,0xa5,0x78,0x25,0x5a,0x50,0xf9,0xe4,0xa0,0x24,0xc8,0x12,0x9e,0xef,0x18,0x96,0x96,0x93,0x63,0xf1,0x6b,0x42,0x66,0x63,0x10,0xc8,0x10,0x12,0x54,0x2f,0x8d,0x63,0x24,0xdd,0xb4,0x7f,0xa,0x3b,0xd2,0x56,0x1d,0xa0,0x9d,0xbe,0xa,0x2f,0xfd,0xde,0x6d,0x81,0x51,0xc4,0xd7,0xa5,0xb3,0x23,0xb8,0x8a,0x78,0x25,0x5b,0x7,0x75,0xf4,0xbd,0x5,0xa,0x45,0xad,0x9a,0xd5,0xd1,0xc5,0xc5,0x80};
    uint8_t rlpproof1[]= {0xf9,0x2,0x11,0xa0,0xff,0x78,0x28,0x85,0xf1,0x2b,0x27,0x40,0xa1,0xb1,0x13,0xa,0x3a,0x80,0x73,0xdc,0x88,0x7c,0x51,0x94,0xd9,0x7f,0x73,0x83,0x5b,0x56,0xe4,0xda,0x9c,0x94,0xa0,0x84,0xa0,0x14,0x60,0x68,0x1c,0xd7,0x3e,0x74,0xaa,0xad,0x77,0x39,0x5,0xaa,0x1f,0x1a,0x39,0xe6,0x9c,0x9c,0x27,0x33,0x8f,0xb0,0x65,0x26,0x90,0xde,0x8a,0x5c,0x5f,0xec,0x45,0xa0,0xea,0x9e,0x4e,0x98,0xbc,0x5a,0xfe,0x5e,0x2e,0xed,0xa0,0xd1,0x88,0xcb,0xb5,0xc1,0x1c,0x62,0xcc,0xfd,0x3d,0x34,0x3d,0xa6,0x35,0xcd,0xbc,0x94,0x2e,0x16,0xdd,0x2e,0xa0,0xf4,0x6d,0xd4,0x2f,0xf7,0x80,0xec,0x9a,0x33,0x10,0x95,0x9d,0x96,0x78,0x19,0xab,0xb1,0x7,0xa6,0x8d,0x1,0x3d,0x6d,0x75,0x24,0x1d,0x12,0x94,0xec,0xab,0x71,0x5d,0xa0,0x3b,0xf8,0x9b,0x37,0x63,0xea,0xf3,0x3f,0x69,0x28,0x87,0x1c,0xbd,0xe6,0xf3,0xd9,0x2f,0x61,0xe0,0x20,0x7b,0x41,0x2e,0x67,0xf1,0x3,0x7e,0x45,0x4c,0xcd,0x3,0x63,0xa0,0xe6,0x51,0x5f,0x70,0x52,0x5a,0x7d,0x92,0x74,0xad,0x74,0x32,0x3d,0xc5,0x52,0xb6,0x2e,0xa2,0x78,0xf9,0xa4,0xdd,0x50,0x75,0x16,0xda,0xbd,0xb2,0x3c,0x7f,0xf3,0x45,0xa0,0x7,0xa3,0xc4,0xc8,0x1b,0x25,0xee,0xb0,0xdc,0x71,0xc1,0x14,0x72,0x3c,0x1c,0xaf,0xe0,0x5c,0x90,0xed,0x4d,0xb1,0xdb,0x91,0x6b,0xd4,0xf0,0x9,0x44,0xd3,0xa4,0xfd,0xa0,0xd2,0x3b,0xf2,0x9d,0xcb,0xa8,0x75,0x22,0xbb,0xbc,0xe0,0xb5,0xdf,0xb0,0x32,0xc6,0x80,0x7b,0xc,0x9,0x64,0x18,0x38,0x64,0xc6,0xb9,0x46,0x98,0xe1,0xfe,0x23,0xd9,0xa0,0x7a,0x87,0x5c,0xa5,0xd3,0x60,0x58,0xf,0xee,0x34,0x10,0x5d,0x18,0x79,0xa4,0x9,0xf0,0x5d,0xad,0xf5,0x95,0x5c,0xf6,0xff,0x20,0xe0,0x56,0xb9,0xd3,0xe9,0x36,0x1b,0xa0,0x3f,0x37,0xf3,0x68,0xf3,0x89,0x2b,0xc4,0x4a,0x1e,0x59,0x49,0x98,0xd6,0x65,0x5b,0xb1,0x91,0xbe,0xc5,0x16,0xef,0xa7,0x17,0x2f,0x6e,0x4c,0x21,0x36,0xbd,0xb0,0x91,0xa0,0xc6,0xd8,0x22,0x2,0x13,0xa8,0x10,0xbd,0xae,0xa7,0x2,0xb2,0xa0,0xb8,0xda,0xeb,0x23,0x3e,0xac,0x86,0xdc,0xfd,0x2e,0x29,0x46,0xf9,0xc1,0x1c,0xbb,0x18,0xd9,0x21,0xa0,0x61,0xdc,0x8c,0xda,0xc9,0x13,0x24,0x9c,0x42,0x8d,0x77,0x5a,0xd9,0x8d,0xe4,0xfe,0xd1,0x56,0xe6,0xf,0x91,0x2e,0x45,0xe5,0xc,0xc0,0x24,0xf6,0xa1,0x7b,0xef,0xdb,0xa0,0x21,0xbc,0xc6,0x7a,0x8b,0xbe,0xe8,0x48,0xa4,0xe2,0xc4,0x87,0xb2,0xa2,0x1a,0xf9,0x12,0x9b,0x76,0x9,0xa4,0x30,0x48,0xd9,0x67,0x87,0x47,0xd0,0x76,0x1c,0xdf,0x7e,0xa0,0xed,0x74,0x95,0xdc,0x90,0xf5,0x85,0x8e,0x44,0xc1,0xcf,0x7b,0x61,0x4f,0x62,0x11,0xb6,0x30,0x1a,0xf9,0x54,0xa6,0x6d,0xf7,0x42,0x10,0xb3,0x4b,0xc4,0x70,0xe5,0x31,0xa0,0xe2,0x40,0x2a,0xd7,0xf,0x46,0xbc,0x10,0x99,0xc3,0xc0,0x78,0xbd,0xb9,0x40,0x93,0x12,0xcd,0xdd,0xf7,0xad,0x9d,0xa4,0x1,0x40,0x35,0x98,0x75,0x98,0x1,0xa7,0xe6,0xa0,0x2c,0x94,0xc4,0xec,0x55,0x6,0x93,0x97,0x66,0xe,0xb1,0x3a,0x5b,0x24,0x8b,0x3b,0xcd,0xd2,0x8e,0xe0,0x73,0x7,0xb2,0x8c,0xf8,0xc4,0xc7,0x65,0x86,0xc7,0xdb,0x5b,0x80};
    uint8_t rlpproof2[]= {0xf9,0x2,0x11,0xa0,0x76,0x0,0x40,0x55,0x55,0x8a,0x55,0x6,0x8,0xd3,0x6f,0xfb,0x43,0x8,0xb0,0x38,0xe,0x48,0x7f,0xce,0x4,0x1,0xfd,0xb9,0x46,0x82,0x31,0xf8,0x7d,0x3d,0x9b,0x7b,0xa0,0x46,0x1b,0x45,0x78,0x3f,0x56,0x5,0x6c,0x74,0xb0,0x99,0xe5,0x30,0xca,0xbe,0x91,0x2c,0x4b,0xfc,0x8d,0x9d,0xd9,0x4d,0x67,0x47,0x4c,0xbb,0xe7,0xdd,0xbe,0xe6,0x6f,0xa0,0xc0,0x41,0x2f,0xa0,0xad,0x2,0xf,0xf2,0x4b,0x18,0xe8,0x7b,0x3c,0xb0,0x84,0x61,0x5d,0x21,0xbb,0x1c,0x1e,0x38,0x31,0xe9,0x18,0x22,0x4c,0x21,0xfc,0xe3,0x3f,0x29,0xa0,0x63,0x10,0xf2,0x83,0x3f,0x97,0xac,0xa5,0x4b,0x4e,0x52,0x47,0x1d,0xd0,0xf2,0xa8,0xd0,0x38,0xcc,0xc6,0x55,0x26,0xbb,0x7f,0xb,0x4b,0x33,0xc9,0x6d,0x39,0xe9,0x2d,0xa0,0x50,0x34,0x91,0xf4,0x88,0x20,0x74,0x21,0x68,0xdb,0x6f,0xc3,0x18,0x3,0x99,0xba,0x2f,0xcc,0xd7,0xe9,0x89,0x0,0xd2,0x9a,0xcb,0xac,0x71,0xfd,0xf0,0xac,0x62,0x5c,0xa0,0xa7,0xf9,0xe,0xd5,0x86,0x32,0x51,0x8c,0x97,0x7b,0x24,0x83,0xfd,0x91,0x91,0x7c,0x15,0x7f,0x65,0x1a,0xa3,0xf7,0xdb,0x52,0x77,0x9e,0xfc,0x81,0x76,0x89,0x46,0x34,0xa0,0x2,0x7b,0x9d,0xdb,0xf6,0x3e,0x51,0x96,0x7d,0x10,0xa3,0x41,0xc,0x80,0xd1,0x46,0x58,0x6e,0x58,0xcd,0x21,0xc6,0x37,0x6d,0xb2,0x43,0xab,0x48,0xdf,0xeb,0xde,0xba,0xa0,0xaa,0x31,0xa4,0x9e,0xc7,0x14,0x5a,0xd6,0xf6,0x0,0x48,0xee,0xdb,0x61,0xc6,0xdd,0x66,0xa6,0xae,0x44,0xa6,0xd1,0x22,0xcd,0xa5,0x19,0xf3,0xef,0x86,0xa2,0xef,0x29,0xa0,0x33,0x1c,0xb3,0x36,0x4a,0x40,0x6a,0xed,0xff,0x23,0x67,0x4f,0xbc,0x74,0x51,0xa0,0x92,0x6c,0xeb,0x23,0x29,0x29,0xe3,0xb4,0x15,0xfe,0x8a,0xb3,0x43,0xe6,0xdd,0x4e,0xa0,0xd8,0xbb,0xc1,0x2d,0xe0,0x15,0x79,0xf3,0xdf,0xc0,0xff,0x9c,0x2e,0x9f,0x31,0x37,0xe7,0xf0,0xbe,0x8d,0x1b,0xa1,0xc,0xfa,0xe7,0x9d,0xc2,0x94,0x93,0x4d,0x26,0xe4,0xa0,0x8a,0xe,0xb3,0xbc,0x9a,0x9,0x2b,0xab,0xd4,0x42,0xee,0x57,0x93,0x83,0x19,0x58,0x96,0xae,0xbb,0x51,0xc6,0x93,0xac,0x75,0xbc,0x56,0xb0,0x29,0xba,0xea,0x22,0xfd,0xa0,0x6e,0xe1,0xeb,0xa9,0xb5,0x4a,0x41,0xe3,0xe1,0xc2,0x50,0x9e,0xc4,0x9c,0xe7,0x45,0x54,0x49,0xf4,0xe8,0x8b,0x1a,0xe2,0xd0,0x71,0xb4,0x7d,0x8c,0x53,0x9c,0x1a,0xe8,0xa0,0x1e,0xab,0x2c,0x80,0x34,0x82,0x68,0x6f,0x59,0x2c,0x88,0x64,0x6d,0x83,0x7f,0x2f,0xff,0xda,0x17,0xb4,0x70,0x81,0x2e,0x7e,0x88,0x35,0x40,0x56,0xd,0x20,0x86,0x9f,0xa0,0x7b,0xe9,0x4b,0xb6,0x5,0x20,0xad,0xee,0xd8,0x1c,0xdb,0x31,0x7a,0xd9,0x91,0xba,0x22,0x54,0x61,0xde,0x92,0xd2,0x9e,0xdb,0x9b,0x9a,0x11,0x1a,0xe4,0xd6,0x42,0x49,0xa0,0x9a,0x96,0xf,0x1c,0x84,0x3e,0xbb,0xf1,0xb,0x13,0xa8,0x3b,0x9b,0x67,0x70,0x11,0x36,0x1c,0xdd,0x9f,0x54,0x50,0x8a,0x61,0x70,0x2a,0x33,0x77,0x32,0x11,0x1f,0x70,0xa0,0x60,0x22,0x45,0x88,0x1d,0x9f,0xd4,0x6e,0xa7,0x66,0xee,0x21,0x9e,0xee,0xe7,0x37,0x9,0x6d,0xa8,0xa6,0xda,0xe9,0x52,0x1b,0xcb,0x3b,0x79,0xe8,0xda,0x2a,0xde,0xf3,0x80};
    uint8_t rlpproof3[]= {0xf9,0x2,0x11,0xa0,0x48,0x4d,0xba,0x0,0x5d,0xa9,0x63,0xf5,0x13,0x5d,0x85,0xc9,0xc4,0x4a,0xee,0xb1,0xe8,0xdf,0x8a,0xbd,0x7d,0xe8,0x54,0xa,0x83,0xa8,0xfd,0xeb,0xb,0x3a,0x24,0xaf,0xa0,0x69,0x4f,0x70,0x3c,0xdf,0x35,0x13,0x86,0x94,0x5b,0xe4,0xba,0x56,0xc0,0x42,0xd1,0x85,0x2d,0x63,0xba,0x3e,0x1d,0xad,0x84,0x72,0x2f,0xe5,0x55,0xac,0x24,0xa4,0xf7,0xa0,0xd0,0x40,0x68,0xcd,0x90,0x55,0xfb,0x5b,0x6c,0xd3,0x57,0x12,0x2,0xb7,0xda,0xfd,0x2a,0x74,0x94,0xbd,0x7d,0xa2,0x6,0x1c,0x1a,0x68,0x1e,0xe7,0xb9,0x70,0x9c,0x4c,0xa0,0xc4,0x28,0xf5,0x87,0x2d,0x17,0x28,0x3f,0x12,0x15,0xe6,0x9d,0x93,0xa4,0x1c,0x86,0x5,0x17,0x67,0x99,0x48,0x6e,0x64,0x8e,0xcc,0xd4,0x87,0x43,0x85,0x8a,0x42,0xf9,0xa0,0x32,0x29,0xf0,0x89,0x77,0xd7,0x0,0x58,0xd7,0xdf,0x68,0x2d,0xbb,0xd4,0x23,0xb6,0xa2,0x8e,0x1,0x26,0x6c,0x9,0xaf,0x1e,0xe1,0x41,0xd9,0x35,0xed,0xf5,0x2d,0xa9,0xa0,0x7b,0x91,0xdb,0x48,0x82,0x5d,0x9d,0x38,0xef,0xf4,0xa4,0xd,0x27,0x35,0xf5,0x79,0xd5,0xd1,0x47,0x30,0xd1,0x30,0x92,0xe5,0x16,0xd8,0xd0,0x98,0xd5,0xeb,0x9,0x77,0xa0,0x76,0xd5,0x7b,0x8d,0x66,0xf7,0x71,0x47,0x70,0x4d,0x88,0x5b,0xdb,0x4b,0x2c,0xc0,0x9c,0x6e,0xf,0x3f,0xab,0x1a,0xd,0xe8,0x6,0xd5,0x15,0x58,0x71,0x44,0xb3,0xb6,0xa0,0xec,0xf8,0xae,0xbc,0x6d,0xb4,0x50,0x86,0x1a,0x5a,0x7e,0x11,0x89,0xbb,0x6a,0x70,0xcd,0x51,0x29,0x22,0x61,0x9a,0x2e,0x37,0x99,0xff,0xf2,0xc8,0x41,0xb9,0x6e,0x2f,0xa0,0xd4,0xed,0x88,0x2,0xab,0x3d,0x86,0xec,0xe,0xf5,0x97,0x79,0x40,0x84,0xa9,0x32,0xac,0x5,0xd2,0xe7,0x92,0x44,0x5a,0x37,0xf,0x85,0xfb,0x48,0x55,0x8b,0xfe,0x6d,0xa0,0xb1,0x90,0x67,0xa5,0x35,0xe5,0x4c,0x96,0x7c,0x97,0x11,0xff,0x68,0x54,0x32,0xfd,0xfc,0x1,0x78,0x49,0xb4,0xe4,0x85,0xee,0x70,0x4,0x5f,0x31,0xe6,0xf4,0x33,0xa9,0xa0,0x51,0xbf,0x86,0x1e,0x6f,0xc,0xdc,0x3d,0x11,0xe4,0x2d,0xb5,0x4e,0x65,0x84,0x66,0xd1,0x0,0xb0,0xb3,0x10,0x3a,0x44,0x5b,0xd,0xf5,0xb7,0xb7,0x6a,0xf1,0x79,0xa6,0xa0,0xc,0xb6,0x27,0x37,0x71,0xb3,0xdc,0xad,0x80,0xb6,0xc8,0x2a,0x7b,0xdf,0x92,0x9,0x21,0x40,0x6b,0x6f,0xef,0xe8,0x2b,0xd2,0x49,0xb8,0x4c,0x65,0xce,0xe1,0x67,0xd2,0xa0,0x3f,0x32,0x8d,0x8b,0xf,0x30,0x3a,0x67,0x5e,0x5d,0xbc,0x2b,0xa9,0x89,0x9d,0xd9,0x61,0xbf,0xa,0x16,0xdd,0x5b,0x4e,0xbf,0x9e,0xfb,0x31,0xfa,0x8f,0x5,0xdb,0xf5,0xa0,0xd7,0x5f,0x5,0xb9,0x86,0x89,0x9c,0x1e,0xa4,0x8c,0x48,0x73,0x11,0x9d,0x0,0x5c,0x75,0xc1,0x5f,0xd1,0x80,0xcc,0xed,0x76,0x18,0x44,0x45,0xa7,0x30,0xbc,0xac,0xde,0xa0,0x47,0x71,0x78,0xfd,0x4,0xe8,0x2b,0x3b,0x6e,0xd7,0x9,0xe6,0x79,0x86,0x9e,0x6d,0x44,0x39,0x73,0x98,0x10,0xea,0x82,0x5b,0xe6,0x2a,0x1,0x4a,0xe0,0xc5,0x5c,0xd7,0xa0,0xe1,0xfa,0x2c,0x34,0xc0,0xfd,0x28,0x21,0xac,0x10,0x8e,0xcd,0x33,0x15,0x35,0xe0,0xd3,0x2,0x5b,0xbf,0x6,0xfe,0xe3,0x38,0xf0,0x14,0x4e,0xf8,0x52,0xe7,0xe0,0x10,0x80};
    uint8_t rlpproof4[]= {0xf9,0x2,0x11,0xa0,0x9d,0x8b,0x83,0x42,0x55,0xc3,0xf2,0xd7,0xaf,0x40,0x82,0x45,0xd4,0x94,0xd4,0x9e,0x0,0x3e,0x19,0xf9,0x71,0xec,0xb6,0xb0,0x6e,0xd7,0xaf,0x26,0x2f,0x23,0x74,0x7d,0xa0,0x57,0x71,0x1,0x4d,0xb0,0x85,0x46,0xbb,0x9,0xca,0x48,0xff,0x38,0x30,0xe5,0x1e,0x32,0xf9,0xbb,0xcd,0xc7,0x96,0x64,0xf4,0x78,0x89,0x5,0xbe,0xf6,0xe4,0xbc,0x3a,0xa0,0x8c,0x66,0x37,0x29,0x97,0xae,0x88,0xd5,0x4c,0x96,0x2f,0x5e,0xf8,0x83,0xa9,0xcf,0x5a,0x16,0xae,0x4c,0x42,0x48,0x3,0xb7,0x42,0xf,0x6f,0xa9,0xad,0x5b,0x1a,0x61,0xa0,0xc6,0x66,0xc6,0x81,0x81,0x4e,0x2b,0xf9,0xb6,0xa9,0x55,0x25,0x3,0x74,0xc6,0x17,0x40,0xd9,0x8c,0x9f,0x50,0x5a,0x3d,0xcb,0xea,0xe9,0x2b,0xce,0xc5,0x31,0x38,0x10,0xa0,0x8c,0xdc,0x15,0xf4,0xd6,0x33,0xc0,0x13,0xa2,0xf7,0x19,0x8c,0xff,0x9e,0xf,0x76,0x97,0x89,0xc2,0x56,0x58,0xa8,0xca,0xef,0xf5,0x2e,0xda,0xb,0x54,0xf5,0x86,0x40,0xa0,0x6c,0x94,0x3f,0xe,0xce,0x24,0x23,0x43,0xc9,0xe2,0x90,0x94,0x22,0xcd,0x39,0x12,0x55,0x32,0x44,0xf6,0x4f,0x6e,0xf,0xe8,0xe3,0xe9,0xdb,0xfa,0x88,0x7e,0x2d,0x4,0xa0,0xb6,0xd7,0x9e,0x66,0x52,0x73,0xfc,0x75,0x91,0xdb,0x5b,0x5d,0xbc,0x4b,0x4a,0x7c,0x71,0x40,0xad,0x26,0xff,0x5e,0xa,0x23,0x53,0x2b,0x7c,0xee,0xec,0xc7,0xa1,0x47,0xa0,0xbc,0x38,0xf8,0x10,0x1e,0xb3,0x6a,0x2d,0xd7,0x45,0x60,0x92,0x29,0xf5,0xc0,0x4a,0xe7,0x66,0x8f,0x93,0xa2,0xe,0x66,0x5c,0x56,0xf2,0xfc,0x3c,0x9,0xab,0x8d,0x20,0xa0,0x65,0xa9,0xc3,0xc0,0x2,0xa1,0x76,0xc7,0x79,0x5e,0x17,0x8c,0xf2,0xe6,0x3c,0x6b,0x91,0x2e,0xaa,0x29,0xd0,0x65,0x75,0xf9,0x48,0x81,0xa1,0x11,0x2b,0x4d,0x42,0xd0,0xa0,0x76,0xd4,0xa,0x25,0x46,0x73,0xc3,0x68,0xb1,0xeb,0x88,0x70,0x36,0x3f,0xd3,0x10,0xc9,0x86,0xf2,0x96,0xeb,0x4c,0x92,0xb6,0xac,0x41,0x8e,0x4a,0x13,0x70,0x45,0x66,0xa0,0x4e,0x33,0x53,0x16,0x3d,0xee,0x6d,0x1,0x12,0x24,0x62,0x7c,0x9b,0xb1,0x8a,0xd7,0x69,0x5a,0xca,0x14,0xb1,0x6e,0x66,0xdf,0xe5,0xc0,0x7,0xed,0x8c,0x5,0x80,0x87,0xa0,0xfa,0x12,0xe7,0x9,0xb,0x38,0xe3,0xa7,0x77,0x45,0xfa,0xa8,0x90,0xf7,0xf4,0xdd,0x87,0x9d,0x33,0xb4,0xf7,0x98,0x87,0x57,0x8c,0xe4,0x72,0xe0,0x62,0x59,0xd5,0x56,0xa0,0x37,0x43,0x8e,0x66,0xdd,0xc3,0x5e,0x4f,0x33,0xb3,0x6f,0x2a,0xb0,0xd0,0x9b,0x9f,0x71,0x8d,0x50,0xfc,0xf,0x1c,0x63,0xb0,0xf,0xda,0x41,0x2,0x64,0x33,0xed,0xaf,0xa0,0x48,0xdd,0x6c,0xea,0xc7,0x91,0x17,0x55,0xbd,0x41,0x5e,0xad,0xfd,0xcf,0xf3,0x6e,0x64,0xca,0x13,0xfb,0x30,0x75,0x47,0x90,0x9f,0xe6,0x21,0x7,0x88,0xcf,0xa2,0xdd,0xa0,0x3b,0xdb,0x22,0xa0,0xc,0xb7,0x63,0xfd,0xb5,0xff,0xe,0xe0,0xf1,0xf1,0x7c,0xa,0xf8,0xcf,0x55,0x13,0x79,0x6,0xbe,0xc9,0x36,0xae,0x74,0x99,0x64,0xe3,0x66,0x9d,0xa0,0xa0,0xd9,0x57,0x41,0xc6,0x4e,0xa1,0xb1,0xd,0xb7,0x23,0xae,0x63,0xb5,0x11,0x5f,0x1d,0xff,0xcd,0x8d,0x75,0x19,0x98,0x6f,0xb2,0x64,0x43,0xdd,0x6,0x38,0x3,0xa0,0x80};
    uint8_t rlpproof5[]= {0xf9,0x2,0x11,0xa0,0x4a,0x96,0x88,0xa6,0x7e,0x32,0x59,0xa8,0xf2,0x58,0xb6,0x50,0xfa,0x1e,0xe0,0x7f,0xc1,0x22,0x62,0x5a,0x2e,0xdc,0x93,0xfd,0x74,0xb3,0xca,0x71,0x5b,0xe4,0x7a,0x29,0xa0,0x94,0xda,0x18,0x2e,0xfc,0xad,0x85,0xc8,0x41,0x93,0x10,0x50,0x83,0xcf,0x9c,0xaa,0xa7,0x2b,0x8a,0xba,0x5f,0x84,0xe9,0x84,0x82,0x11,0x38,0x7b,0x14,0xf0,0x41,0xbc,0xa0,0x74,0x66,0xe,0xc2,0xdf,0xfb,0xf4,0x35,0x35,0x22,0x46,0xf9,0x2f,0x88,0x1c,0xda,0x8e,0x9e,0x69,0x88,0x1d,0xcd,0x31,0xc3,0x1f,0xaa,0x7b,0xd5,0xc4,0xd2,0x8f,0x28,0xa0,0x8a,0x30,0xa9,0x31,0xbb,0x5b,0xa7,0x38,0x4c,0xb4,0x71,0xf6,0x27,0xc8,0x95,0x3b,0xa4,0x48,0xc0,0x2b,0x88,0x6d,0xe5,0xa8,0xfe,0x85,0xb,0x8e,0x8d,0xbd,0x80,0xa3,0xa0,0x32,0xd0,0x0,0x91,0x7,0x71,0x6a,0x2,0xdb,0x9a,0x1c,0x32,0xfe,0x9e,0xd1,0xd9,0x64,0x19,0x3,0xde,0x96,0xcf,0x25,0x14,0x3c,0xcb,0x87,0x5e,0x4,0x64,0x76,0x46,0xa0,0xcd,0xf8,0xe1,0xa9,0x66,0xff,0x8f,0x99,0xdd,0x73,0x98,0xc4,0x9e,0x0,0x31,0x24,0x1f,0xa5,0x7c,0xf1,0x9a,0x7c,0x2d,0xf3,0xfe,0x28,0xa0,0x96,0x71,0x84,0x35,0x80,0xa0,0x3c,0x10,0x70,0xcc,0x8,0x15,0x2c,0x5f,0x7c,0x8b,0x64,0xce,0xc3,0x40,0x2b,0xbb,0x42,0xad,0x4f,0xb9,0xcd,0x4a,0xb5,0x23,0xc6,0xfd,0xd9,0xbc,0xe8,0x6c,0x16,0xe7,0xa0,0x33,0xd1,0xe,0xa3,0xd1,0x5c,0x81,0x32,0x6d,0xb9,0x33,0x35,0xae,0xe2,0x15,0xb9,0x80,0xb1,0x1e,0x55,0x31,0x91,0x4c,0x35,0xb9,0xb6,0x51,0xc2,0x33,0x6a,0xfa,0x21,0xa0,0x4,0xd7,0x1e,0xbb,0x45,0xfe,0xa0,0x22,0x2a,0xb2,0xcc,0xf8,0xb4,0xdd,0xec,0x96,0x7e,0xa2,0x8d,0x52,0x2d,0x1f,0x9d,0xe6,0xd,0xdc,0x91,0x27,0x64,0xab,0x57,0x75,0xa0,0x90,0x6,0x99,0xb7,0xd0,0x25,0x7f,0x4e,0x6c,0x15,0xd0,0xce,0xcd,0x92,0x56,0xe1,0x56,0x7b,0x71,0x6d,0xea,0xd5,0x2c,0x82,0x5e,0x42,0x1d,0x17,0xd9,0xd2,0xea,0x52,0xa0,0x4c,0x4d,0x86,0xb7,0x81,0x23,0x9a,0x16,0x2a,0xf,0x9,0x5a,0xba,0x57,0x0,0x3,0xfe,0x9c,0xc0,0x88,0x8e,0x43,0x8a,0xfa,0xbf,0xe5,0x9e,0x93,0x52,0x28,0x79,0xa1,0xa0,0xe8,0xe0,0xcc,0xc6,0x87,0x8f,0x2,0xb4,0xf1,0xfd,0xd2,0x27,0x9d,0xa1,0xd5,0xf4,0x25,0x87,0x8,0x1d,0x53,0x2e,0xad,0x3d,0xa9,0xc6,0x88,0xf2,0x6b,0xa3,0x9a,0x89,0xa0,0x7c,0xfe,0x16,0xf3,0x2,0x27,0xcf,0xd4,0x1e,0x31,0xea,0xe,0x5d,0x79,0x58,0x20,0x8c,0x89,0x75,0x7c,0x87,0x6e,0x94,0x7,0x81,0x4a,0x44,0xd7,0x32,0xcd,0x78,0x2b,0xa0,0xc9,0x94,0xa9,0xf9,0x3c,0xf8,0xb9,0x98,0x47,0xdd,0x4,0xc1,0xb5,0x8b,0x60,0x90,0xd,0x64,0x44,0x6,0xaa,0x21,0x72,0x3c,0x85,0x1f,0x30,0x20,0x75,0x93,0xa2,0x3e,0xa0,0x33,0x98,0x2d,0xa7,0x95,0x3c,0x89,0x60,0x54,0xc2,0xed,0x7a,0xfd,0x44,0xc4,0x67,0x60,0x5d,0x4d,0x95,0x82,0x48,0xad,0xc4,0xf9,0x78,0x89,0x46,0xb8,0x3f,0x36,0xd7,0xa0,0x98,0xb2,0x2b,0x27,0xd5,0x9a,0xaa,0x4a,0xb9,0x54,0x5c,0x70,0xac,0xcf,0xd8,0xde,0xb2,0xd8,0x15,0xb3,0x5a,0xf1,0xd,0x89,0xa6,0x9c,0xcd,0x82,0xc3,0x88,0x69,0x12,0x80};
    uint8_t rlpproof6[]= {0xf9,0x1,0x31,0x80,0xa0,0x84,0x48,0x85,0xfa,0xd7,0x2a,0x42,0x2b,0x9b,0x1b,0xeb,0xb5,0x41,0x79,0xa2,0x51,0x24,0x41,0xed,0xbb,0x48,0x6c,0xea,0x95,0x91,0xc5,0x17,0x46,0x1a,0xa7,0xa2,0x97,0x80,0xa0,0x61,0x18,0xee,0xaf,0xd9,0x1a,0x10,0xca,0xad,0x94,0x66,0xa8,0x47,0x2b,0x35,0x14,0x76,0xbd,0xc7,0xa0,0xf,0xc9,0xca,0x2e,0xb5,0x76,0x0,0x46,0xa2,0x99,0x45,0x39,0x80,0xa0,0x92,0x4f,0x8,0x13,0x76,0x96,0x2c,0x1a,0xa4,0x1a,0x97,0xd,0xfc,0x8,0xc,0xe,0x39,0x0,0x1c,0x44,0x8c,0x99,0x95,0x29,0x34,0x87,0xd7,0xe4,0xb1,0xf2,0x68,0x31,0x80,0xa0,0xb3,0x3a,0x6f,0x69,0xa9,0x27,0x13,0x30,0x53,0xf4,0xa4,0xa1,0xe3,0xbf,0x6c,0x49,0xad,0x66,0x49,0x8c,0xee,0xe9,0x3d,0x1b,0xa6,0x30,0xc0,0x90,0x42,0x62,0x4b,0x80,0x80,0xa0,0x73,0xc7,0x49,0x74,0x3b,0xa3,0xc1,0x6d,0xac,0xbb,0x96,0xcd,0x6f,0xb4,0x32,0xdb,0xfb,0x21,0xa1,0xec,0x54,0x54,0xdd,0xed,0xed,0xed,0x3d,0x9e,0xa1,0xdb,0x1b,0xe0,0xa0,0x6,0x26,0x57,0x34,0xb2,0xae,0x70,0xd2,0x36,0xcc,0x10,0x73,0x3c,0x71,0xc4,0x4d,0x70,0x98,0xd0,0x72,0x2,0xf8,0xa8,0x75,0xc9,0xdc,0x1e,0x82,0xa9,0xb2,0xc0,0xdd,0x80,0xa0,0xf6,0x34,0x4,0xf8,0x2d,0xc2,0x73,0xab,0xa0,0xcb,0x74,0x2f,0x22,0xb0,0x9f,0x5c,0x4e,0x95,0x80,0x8e,0x1b,0xd9,0x13,0x38,0x10,0x5f,0x59,0x93,0xc5,0xb7,0xdc,0x24,0xa0,0x64,0x7a,0x8e,0xf0,0x36,0x83,0x7a,0xc9,0x1e,0xba,0x3a,0x85,0x5,0x6c,0xba,0xbc,0xc7,0x7,0xfd,0x90,0xdb,0x5,0x73,0xbd,0x7,0x39,0xd0,0x70,0x9d,0x23,0x3a,0xa2,0x80,0xa0,0xe1,0xe8,0x3e,0x52,0x2f,0xc4,0xfb,0x9b,0x6e,0x2a,0x67,0x8d,0x37,0x15,0x96,0x47,0xff,0x34,0x4,0xa3,0xac,0x52,0xf1,0x0,0x23,0xe7,0xb1,0x69,0x9f,0xd6,0xd3,0x91,0x80};
    uint8_t rlpproof7[]= {0xf8,0x51,0xa0,0x49,0x78,0x33,0x24,0x5b,0x37,0xe,0xc5,0x78,0xcb,0xc1,0x2,0x4,0x29,0x85,0x86,0x7f,0xe2,0x32,0x74,0xab,0xa,0x2d,0xd9,0xee,0x5d,0x11,0xcf,0x10,0x6a,0xf6,0x4a,0x80,0x80,0x80,0x80,0x80,0x80,0xa0,0xd,0x7d,0xd5,0xb7,0x66,0x5,0x83,0x5,0x3b,0xb9,0x62,0x68,0xd6,0x27,0x5,0x41,0x96,0x82,0x7d,0x15,0x6c,0x7,0x3,0xe7,0xb7,0x5e,0x61,0xdd,0x3,0x71,0xca,0xdc,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80};
    uint8_t rlpproof8[]= {0xf8,0x70,0x9d,0x20,0x3d,0xb1,0x44,0xee,0x84,0xcf,0xbf,0xe3,0x90,0x1e,0xe8,0x36,0xb6,0xbf,0xe3,0x4d,0x25,0x86,0xb5,0xb6,0x74,0x3c,0xf2,0x16,0x80,0x28,0x29,0xb8,0xb8,0x50,0xf8,0x4e,0x1,0x8a,0x3,0x27,0x9e,0xe7,0xa5,0x54,0xa,0xc0,0x47,0xc8,0xa0,0x7b,0x21,0x70,0xeb,0x13,0x42,0x8,0x2d,0x77,0x52,0xa9,0x67,0xe,0xdb,0x1c,0x3f,0x18,0xbf,0x23,0xb8,0xaf,0x1d,0x23,0x13,0x6a,0x46,0x27,0xfe,0xa3,0x40,0xcf,0xf,0xa0,0x4d,0x9b,0xe6,0x48,0xc5,0xbf,0x39,0x97,0x36,0x70,0xd9,0xf8,0xb4,0x81,0xd5,0xd0,0xb9,0x71,0xe6,0xa2,0xdb,0x2d,0xec,0xcc,0x6b,0x98,0xcd,0xe2,0x1c,0x5d,0xd8,0x3e};

    uint8_t **proofs = (uint8_t **)malloc(9 * sizeof(uint8_t*));
    proofs[0] = rlpproof0;
    proofs[1] = rlpproof1;
    proofs[2] = rlpproof2;
    proofs[3] = rlpproof3;
    proofs[4] = rlpproof4;
    proofs[5] = rlpproof5;
    proofs[6] = rlpproof6;
    proofs[7] = rlpproof7;
    proofs[8] = rlpproof8;
    
    int sizes[9] = {
        sizeof(rlpproof0),
        sizeof(rlpproof1),
        sizeof(rlpproof2),
        sizeof(rlpproof3),
        sizeof(rlpproof4),
        sizeof(rlpproof5),
        sizeof(rlpproof6),
        sizeof(rlpproof7),
        sizeof(rlpproof8)
    };
 
    for (int i = 0; i < 9; i++) {
        rlpItems[i] = (RLPItem*) malloc(sizeof(RLPItem));
        rlpItems[i]->memPtr = (uint8_t*) malloc(sizes[i]);
        rlpItems[i]->len = sizes[i];

        own_memcpy(rlpItems[i]->memPtr, proofs[i], sizes[i]);
    }

    uint8_t * mocked_return = (uint8_t *) "\x56\xe8\x1f\x17\x1b\xcc\x55\xa6\xff\x83\x45\xe6\x92\xc0\xf8\x6e\x5b\x48\xe0\x1b\x99\x6c\xad\xc0\x01\x62\x2f\xb5\xe3\x63\xb4\x21";
    uint8_t * ret = extractProofValue(rootHash, path, rlpItems, 9);
    if (!own_memcmp(ret, mocked_return, 32)) {
        return 0;
    }
    return 666;
}
#endif























